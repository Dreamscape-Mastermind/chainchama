# Template for NextJS environment variables.

# For local development, copy this file, rename it to .env.local, and fill in the values.
# When deploying live, you'll need to store the vars in Vercel/System config.

# If not set, we provide default values (check `scaffold.config.ts`) so developers can start prototyping out of the box,
# but we recommend getting your own API Keys for Production Apps.

# To access the values stored in this env file you can use: process.env.VARIABLENAME
# You'll need to prefix the variables names with NEXT_PUBLIC_ if you want to access them on the client side.
# More info: https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables
NEXT_PUBLIC_ALCHEMY_API_KEY=
NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID=

# NEXTAUTH_URL=http://localhost:3000
# Generate this with `openssl rand -base64 32`
# NEXTAUTH_SECRET="a0goK7PPYXtebgIQ9cbdK/aX2oGVKLGuggzXqAqtJhk=" # Added by `npx auth`. Read more: https://cli.authjs.dev
AUTH_SECRET=810bd1ccbf7b1d388d98339ac86d420649bdb789c9ac0c1fad383820341b1773

# Get these values from the Worldcoin Developer Portal
WLD_CLIENT_ID=app_staging_6f8bcbdbc41d923a629309fb038ab81b
WLD_CLIENT_SECRET=sk_890aa88e2b0ff7f495b335e71ad7ca7b36d0eab12def0f14

# Environment variables declared in this file are automatically made available to Prisma.
# See the documentation for more detail: https://pris.ly/d/prisma-schema#accessing-environment-variables-from-the-schema

# Prisma supports the native connection string format for PostgreSQL, MySQL, SQLite, SQL Server, MongoDB and CockroachDB.
# See the documentation for all the connection string options: https://pris.ly/d/connection-strings
POSTGRES_HOST=127.0.0.1
POSTGRES_PORT=5432
POSTGRES_USER=admin
POSTGRES_PASSWORD=devpassword
POSTGRES_DB=chama

DATABASE_URL="postgresql://admin:devpassword@localhost:5432/chama?schema=public"
