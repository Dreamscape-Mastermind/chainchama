{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/BuyMeACoffee.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n/**\n * ----------------------------------------------------------------------------------------------------------------\n * ---------██████╗ ██╗   ██╗██╗██╗     ██████╗        ██████╗ ███╗   ██╗ ██████╗██╗  ██╗ █████╗ ██╗███╗   ██╗-----\n * ---------██╔══██╗██║   ██║██║██║     ██╔══██╗      ██╔═══██╗████╗  ██║██╔════╝██║  ██║██╔══██╗██║████╗  ██║-----\n * ---------██████╔╝██║   ██║██║██║     ██║  ██║█████╗██║   ██║██╔██╗ ██║██║     ███████║███████║██║██╔██╗ ██║-----\n * ---------██╔══██╗██║   ██║██║██║     ██║  ██║╚════╝██║   ██║██║╚██╗██║██║     ██╔══██║██╔══██║██║██║╚██╗██║-----\n * ---------██████╔╝╚██████╔╝██║███████╗██████╔╝      ╚██████╔╝██║ ╚████║╚██████╗██║  ██║██║  ██║██║██║ ╚████║-----\n * ---------╚═════╝  ╚═════╝ ╚═╝╚══════╝╚═════╝        ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝-----\n * ----------------------------------------------------------------------------------------------------------------\n * https://github.com/coinbase/build-onchain-apps\n *\n * Disclaimer: The provided Solidity contracts are intended solely for educational purposes and are\n *   not warranted for any specific use. They have not been audited and may contain vulnerabilities, hence should\n *   not be deployed in production environments. Users are advised to seek professional review and conduct a\n *   comprehensive security audit before any real-world application to mitigate risks of financial loss or other\n *   consequences. The author(s) disclaim all liability for any damages arising from the use of these contracts.\n *   Use at your own risk, acknowledging the inherent risks of smart contract technology on the blockchain.\n *\n */\n\n/**\n * @title Memos\n * @dev Memo struct\n */\nstruct Memo {\n    uint numCoffees;\n    string userName;\n    string twitterHandle;\n    string message;\n    uint256 time;\n    address userAddress;\n}\n\n/**\n * @title BuyMeACoffee\n * @dev BuyMeACoffee contract to accept donations and for our users to leave a memo for us\n */\ncontract BuyMeACoffee {\n    address payable public owner;\n    uint256 public price;\n    Memo[] public memos;\n\n    error InsufficientFunds();\n    error InvalidArguments(string message);\n    error OnlyOwner();\n\n    event BuyMeACoffeeEvent(address indexed buyer, uint256 price);\n    event NewMemo(address indexed userAddress, uint256 time, uint numCoffees, string userName, string twitterHandle, string message);\n\n    constructor() {\n        owner = payable(msg.sender);\n        price = 0.0001 ether;\n    }\n\n    /**\n     * WRITE FUNCTIONS *************\n     */\n\n    /**\n     * @dev Function to buy a coffee\n     * @param  userName The name of the user\n     * @param  twitterHandle The Twitter handle of the user\n     * @param  message The message of the user\n     * (Note: Using calldata for gas efficiency)\n     */\n    function buyCoffee(uint numCoffees, string calldata userName, string calldata twitterHandle, string calldata message) public payable {\n        if (msg.value < price*numCoffees) {\n            revert InsufficientFunds();\n        }\n\n        emit BuyMeACoffeeEvent(msg.sender, msg.value);\n\n        if (bytes(userName).length == 0 && bytes(message).length == 0) {\n            revert InvalidArguments(\"Invalid userName or message\");\n        }\n\n        memos.push(Memo(numCoffees, userName, twitterHandle, message, block.timestamp, msg.sender));\n\n        emit NewMemo(msg.sender, block.timestamp, numCoffees, userName, twitterHandle, message);\n    }\n\n    /**\n     * @dev Function to remove a memo\n     * @param  index The index of the memo\n     */\n    function removeMemo(uint256 index) public {\n        if (index >= memos.length) {\n            revert InvalidArguments(\"Invalid index\");\n        }\n\n        Memo memory memo = memos[index];\n\n        // if operation isnt sent from the same user or the owner, then not allowed\n        if (memo.userAddress != msg.sender && msg.sender != owner) {\n            revert InvalidArguments(\"Operation not allowed\");\n        }\n\n        Memo memory indexMemo = memos[index];\n        memos[index] = memos[memos.length - 1];\n        memos[memos.length - 1] = indexMemo;\n        memos.pop();\n    }\n\n    /**\n     * @dev Function to modify a memo\n     * @param  index The index of the memo\n     * @param  message The message of the memo\n     */\n    function modifyMemoMessage(uint256 index, string memory message) public {\n        if (index >= memos.length) {\n            revert InvalidArguments(\"Invalid index\");\n        }\n\n        Memo memory memo = memos[index];\n\n        if (memo.userAddress != msg.sender || msg.sender != owner) {\n            revert InvalidArguments(\"Operation not allowed\");\n        }\n\n        memos[index].message = message;\n    }\n\n    /**\n     * @dev Function to withdraw the balance\n     */\n    function withdrawTips() public {\n        if (msg.sender != owner) {\n            revert OnlyOwner();\n        }\n\n        if (address(this).balance == 0) {\n            revert InsufficientFunds();\n        }\n\n        (bool sent,) = owner.call{value: address(this).balance}(\"\");\n        require(sent, \"Failed to send Ether\");\n    }\n\n    /**\n     * READ FUNCTIONS *************\n     */\n\n    /**\n     * @dev Function to get the memos\n     */\n    function getMemos() public view returns (Memo[] memory) {\n        return memos;\n    }\n\n    /**\n     * @dev Recieve function to accept ether\n     */\n    receive() external payable {}\n}\n"
    },
    "contracts/ChamaGroup.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\n\ncontract ChamaGroup {\n    // Address of the contract owner\n    address private immutable owner;\n\n    // Counter for generating group IDs\n    uint private nextId = 1;\n\n    // Enum representating the status of the group\n    enum STATUS {\n        ACTIVE,\n        DELETED\n    }\n\n    // Struct to define the structure of the chama groups\n    struct Group {\n        uint id;\n        address creator;\n        string name;\n        string description;\n        STATUS status;\n        uint totalContributions;\n        address[] contributors;\n        uint[] contributionAmounts;\n    }\n\n    // Mapping to efficiently store groups by ID\n    mapping(uint => Group) public groups;\n\n    // Mapping to track which groups a contributor has participated in\n    mapping(address => uint[]) private contributorGroups;\n\n    event GroupCreated(uint indexed groupId, address groupCreator, string name, STATUS status);\n    event GroupDeleted(uint indexed groupId, address groupCreator, STATUS status);\n    event ContributorAdded(uint indexed groupId, address indexed newContributor);\n\n\n    // Contract\n    constructor(){\n        owner = msg.sender;\n    }\n\n    // Modifier to allow only the contract owner to perform certain actions\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only the owner can perform this action.\");\n        _;\n    }\n\n\n     // Function to create a new chama group\n    function createGroup(\n        string memory _name, // name of the chama group\n        string memory _description // description of the chama group\n    ) public {\n        // validation checks for input parameters\n        require(bytes(_name).length > 0, 'Name must not be empty');\n        require(bytes(_description).length > 0, 'Description must not be empty');\n\n        // Create a new chama group with the provided information and add it to the array\n        Group memory newGroup = Group({\n            id : nextId,  // assign a unique id to the new chama group\n            creator : msg.sender, // set the creator as the current sender of the transaction\n            name : _name, // set the name of the chama group as the provided name\n            description : _description, // set the description of the chama group as the provided description\n            status : STATUS.ACTIVE, // set the status of the chama group as ACTIVE\n            totalContributions : 0, // set the total contributions to 0 as no contributions have been made yet\n            contributors : new address[](0), // create an empty array to store contributors\n            contributionAmounts : new uint[](0) // create an empty array to store contribution amounts\n        });\n\n        // Create a new array with the creator as the first contributor\n        address[] memory contributorsWithCreator = new address[](1);\n        contributorsWithCreator[0] = msg.sender;\n\n        // Assign the new array to the group's contributors\n        newGroup.contributors = contributorsWithCreator;\n\n        groups[nextId] = newGroup; // add the new chama group to the array\n\n        // Track the group in the contributorGroups mapping\n        contributorGroups[newGroup.creator].push(newGroup.id);\n\n        // emit an event to notify listeners that a new chama group has been created\n        emit GroupCreated(newGroup.id, newGroup.creator, newGroup.name, newGroup.status);\n\n        // increment the id counter to generate unique ids for new chama groups\n        nextId++;\n    }\n\n    // Function that allows the group creator to delette the group.\n    function deleteGroup(uint groupId)  public {\n        // Retrieve the group based on the group id\n        Group storage group = groups[groupId];\n\n        // Validatiion check: only creator can delete\n        require(group.creator == msg.sender, \"Only creator can delete\");\n\n        // TODO: Refund the contriibutors when group is delete\n\n        // Remove the group from each contributor's list\n        for (uint i = 0; i < group.contributors.length; i++) {\n            address contributor = group.contributors[i];\n            uint[] storage contributorGroupsList = contributorGroups[contributor];\n\n            // Find the index of the group in the contributor's list\n            for (uint j = 0; j < contributorGroupsList.length; j++) {\n                if (contributorGroupsList[j] == groupId) {\n                    // Remove the group from the list by shifting elements\n                    for (uint k = j; k < contributorGroupsList.length - 1; k++) {\n                        contributorGroupsList[k] = contributorGroupsList[k + 1];\n                    }\n                    contributorGroupsList.pop();\n                    break;\n                }\n            }\n        }\n        // Mark group as delete\n        group.status = STATUS.DELETED;\n\n        // emit an event to notify listeners that the chama group has been deleted\n        emit GroupDeleted(groupId, msg.sender, STATUS.DELETED);\n    }\n\n    // Function to get a group by its ID\n    function getGroupById(uint groupId) public view returns (\n        uint id,\n        address creator,\n        string memory name,\n        string memory description,\n        STATUS status,\n        uint totalContributions\n    ) {\n        require(groups[groupId].id > 0, \"Group does not exist\");\n        require(groups[groupId].status == STATUS.ACTIVE, \"Group is not active\");\n\n        Group storage group = groups[groupId];\n        return (\n            group.id,\n            group.creator,\n            group.name,\n            group.description,\n            group.status,\n            group.totalContributions\n        );\n    }\n\n\n    // Function to get all groups that a specific contributor is part of\n    function getGroupsByContributor(address contributor) public view returns (uint[] memory) {\n        return contributorGroups[contributor];\n    }\n\n    // Add a contributor to a group\n    function addContributor(uint groupId, address newContributor) public {\n        Group storage group = groups[groupId];\n        require(group.status == STATUS.ACTIVE, \"Group is not active\");\n        // Validatiion check: only creator can add a contributor\n        require(group.creator == msg.sender, \"Only group creator can add contributors\");\n\n        // Prevent duplicate contributors\n        require(findContributorIndex(group.contributors, newContributor) == type(uint).max, \"Contributor exists\");\n\n\n        group.contributors.push(newContributor);\n        contributorGroups[newContributor].push(groupId);\n\n        emit ContributorAdded(groupId, newContributor);\n    }\n\n    // Remove a contributor from a group\n    function removeContributor(uint groupId, address contributor) public {\n        Group storage group = groups[groupId];\n        require(group.status == STATUS.ACTIVE, \"Group inactive\");\n        require(msg.sender == group.creator, \"Only creator\");\n\n        uint index = findContributorIndex(group.contributors, contributor);\n        require(index < group.contributors.length, \"Contributor not found\");\n\n        // Safe array manipulation\n        group.contributors[index] = group.contributors[group.contributors.length - 1];\n        group.contributors.pop();\n\n        // Assuming contributionAmounts has the same length as contributors\n        group.contributionAmounts[index] = group.contributionAmounts[group.contributionAmounts.length - 1];\n        group.contributionAmounts.pop();\n\n        // Remove from contributor's groups\n        uint[] storage cGroups = contributorGroups[contributor];\n        for (uint i = 0; i < cGroups.length; i++) {\n            if (cGroups[i] == groupId) {\n                cGroups[i] = cGroups[cGroups.length - 1];\n                cGroups.pop();\n                break;\n            }\n        }\n    }\n\n    // Helper function to find contributor index\n    function findContributorIndex(address[] memory array, address value) private pure returns (uint) {\n        for (uint i = 0; i < array.length; i++) {\n            if (array[i] == value) {\n                return i;\n            }\n        }\n        return type(uint).max;\n    }\n\n}\n"
    },
    "contracts/ChamaGroup2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n\n// TODO add membership contract - use Unlock Protocol for the production version? More research needed\n\ncontract ChamaGroupOwnable is ReentrancyGuard, Ownable {\n    using SafeMath for uint256;\n\n    uint private nextId = 1;\n\n    enum STATUS {\n        ACTIVE,\n        DELETED\n    }\n\n    \n    // TODO update the group struct to better match a group\n    // TODO - add a set contribution amount,\n    // TODO - add a set contribution timeline [ Date]\n    // TODO - add set savings split / ratio\n    // TODO - implement a selected grantee\n    // TODO - implement grantee selection method select the minimum period required\n    // TODO - verify membership before allowing contributions (Attest), currently the implementations is incorrect\n    // TODO - add approve membership\n    // what is a stokvel group? - \n    struct Group {\n        uint id;\n        address creator;\n        string name;\n        string description;\n        STATUS status;\n        uint totalEtherContributions;\n        address[] contributedTokens; // Array to track token addresses that have been contributed\n        mapping(address => uint) totalTokenContributions; // token address => total contribution\n        mapping(address => uint) etherContributions;\n        mapping(address => mapping(address => uint)) tokenContributions; // contributor => token address => amount\n        mapping(address => bool) isContributor;\n        uint contributorCount;\n        address[] contributors; // To safely iterate over contributors\n    }\n\n    mapping(uint => Group) private groups;\n    mapping(address => uint[]) private contributorGroups;\n    mapping(address => uint) private pendingEtherWithdrawals;\n    mapping(address => mapping(address => uint)) private pendingTokenWithdrawals;\n\n    event GroupCreated(uint indexed groupId, address groupCreator, string name, STATUS status);\n    event GroupDeleted(uint indexed groupId, address groupCreator, STATUS status);\n    event ContributorAdded(uint indexed groupId, address indexed newContributor);\n    event ContributorRemoved(uint indexed groupId, address indexed contributor);\n    event EtherWithdrawal(address indexed contributor, uint amount);\n    event TokenWithdrawal(address indexed contributor, address token, uint amount);\n    event TokenContribution(address indexed contributor, uint indexed groupId, address token, uint amount);\n\n    constructor() {\n        // Owner is set by Ownable\n    }\n\n    modifier groupExists(uint groupId) {\n        require(groups[groupId].id != 0, \"Group does not exist\");\n        _;\n    }\n\n    modifier onlyGroupCreator(uint groupId) {\n        require(msg.sender == groups[groupId].creator, \"Only the group creator can perform this action\");\n        _;\n    }\n\n    function createGroup(\n        string memory _name,\n        string memory _description\n    ) public nonReentrant {\n        require(bytes(_name).length > 0, \"Name must not be empty\");\n        require(bytes(_description).length > 0, \"Description must not be empty\");\n\n        Group storage newGroup = groups[nextId];\n        newGroup.id = nextId;\n        newGroup.creator = msg.sender;\n        newGroup.name = _name;\n        newGroup.description = _description;\n        newGroup.status = STATUS.ACTIVE;\n        newGroup.contributorCount = 1;\n\n\n        // we use a \n        newGroup.isContributor[msg.sender] = true;\n        newGroup.etherContributions[msg.sender] = 0;\n        newGroup.contributors.push(msg.sender);\n\n        contributorGroups[msg.sender].push(nextId);\n\n        emit GroupCreated(nextId, msg.sender, _name, STATUS.ACTIVE);\n\n        nextId++;\n    }\n\n    function contributeEther(uint groupId) public payable nonReentrant groupExists(groupId) {\n        Group storage group = groups[groupId];\n        require(group.status == STATUS.ACTIVE, \"Group is not active\");\n\n        group.etherContributions[msg.sender] = group.etherContributions[msg.sender].add(msg.value);\n        group.totalEtherContributions = group.totalEtherContributions.add(msg.value);\n\n        // TODO we can only be allowed t contribute after the group members attest and confirm our membership\n        // the below logic is thus flawed\n        if (!group.isContributor[msg.sender]) {\n            group.isContributor[msg.sender] = true;\n            group.contributorCount++;\n            group.contributors.push(msg.sender);\n            contributorGroups[msg.sender].push(groupId);\n            emit ContributorAdded(groupId, msg.sender);\n        }\n    }\n\n    function contributeToken(uint groupId, address tokenAddress, uint amount) public nonReentrant groupExists(groupId) {\n        require(tokenAddress != address(0), \"Invalid token address\");\n        Group storage group = groups[groupId];\n        require(group.status == STATUS.ACTIVE, \"Group is not active\");\n\n        IERC20 token = IERC20(tokenAddress);\n        require(token.transferFrom(msg.sender, address(this), amount), \"Token transfer failed\");\n\n        group.tokenContributions[msg.sender][tokenAddress] = group.tokenContributions[msg.sender][tokenAddress].add(amount);\n        group.totalTokenContributions[tokenAddress] = group.totalTokenContributions[tokenAddress].add(amount);\n\n        // Track the token address if it's the first time it is contributed\n        if (group.totalTokenContributions[tokenAddress] == amount) {\n            group.contributedTokens.push(tokenAddress);\n        }\n\n        // TODO we can only be allowed t contribute after the group members attest and confirm our membership\n        // TODO make a new function to verify membership before allowing contributions, currently the implementations is incorrect\n        if (!group.isContributor[msg.sender]) {\n            group.isContributor[msg.sender] = true;\n            group.contributorCount++;\n            group.contributors.push(msg.sender);\n            contributorGroups[msg.sender].push(groupId);\n            emit ContributorAdded(groupId, msg.sender);\n        }\n\n        emit TokenContribution(msg.sender, groupId, tokenAddress, amount);\n    }\n\n    function deleteGroup(uint groupId) public nonReentrant onlyGroupCreator(groupId) groupExists(groupId) {\n        Group storage group = groups[groupId];\n        require(group.status == STATUS.ACTIVE, \"Group is not active\");\n\n        for (uint i = 0; i < group.contributors.length; i++) {\n            address contributor = group.contributors[i];\n            uint etherAmount = group.etherContributions[contributor];\n            if (etherAmount > 0) {\n                pendingEtherWithdrawals[contributor] = pendingEtherWithdrawals[contributor].add(etherAmount);\n            }\n\n            // Iterate over contributed tokens\n            for (uint j = 0; j < group.contributedTokens.length; j++) {\n                address tokenAddr = group.contributedTokens[j];\n                uint tokenAmount = group.tokenContributions[contributor][tokenAddr];\n                if (tokenAmount > 0) {\n                    pendingTokenWithdrawals[tokenAddr][contributor] = pendingTokenWithdrawals[tokenAddr][contributor].add(tokenAmount);\n                }\n            }\n        }\n\n        group.status = STATUS.DELETED;\n\n        emit GroupDeleted(groupId, msg.sender, STATUS.DELETED);\n    }\n\n    function withdrawEther() public nonReentrant {\n        uint amount = pendingEtherWithdrawals[msg.sender];\n        require(amount > 0, \"No Ether to withdraw\");\n        require(address(this).balance >= amount, \"Insufficient contract balance\");\n\n        pendingEtherWithdrawals[msg.sender] = 0;\n\n        (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\n        require(success, \"Ether withdrawal failed\");\n\n        emit EtherWithdrawal(msg.sender, amount);\n    }\n\n    // do we need to ensure the correct wei units?\n\n    function withdrawToken(address tokenAddress) public nonReentrant {\n        uint amount = pendingTokenWithdrawals[tokenAddress][msg.sender];\n        require(amount > 0, \"No tokens to withdraw\");\n\n        pendingTokenWithdrawals[tokenAddress][msg.sender] = 0;\n\n        IERC20 token = IERC20(tokenAddress);\n        require(token.transfer(msg.sender, amount), \"Token withdrawal failed\");\n\n        emit TokenWithdrawal(msg.sender, tokenAddress, amount);\n    }\n\n    function getGroupById(uint groupId) public view groupExists(groupId) returns (\n        uint id,\n        address creator,\n        string memory name,\n        string memory description,\n        STATUS status,\n        uint totalEtherContributions,\n        uint contributorCount\n    ) {\n        Group storage group = groups[groupId];\n        require(group.status == STATUS.ACTIVE, \"Group is not active\");\n\n        return (\n            group.id,\n            group.creator,\n            group.name,\n            group.description,\n            group.status,\n            group.totalEtherContributions,\n            group.contributorCount\n        );\n    }\n\n    function getGroupsByContributor(address contributor) public view returns (uint[] memory) {\n        return contributorGroups[contributor];\n    }\n\n    fallback() external payable {\n        revert(\"Fallback function triggered, no ether accepted\");\n    }\n\n    receive() external payable {\n        revert(\"Contract does not accept direct ether payments\");\n    }\n}\n"
    },
    "contracts/ChamaGroup3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n/**\n * @title ChamaGroupV3\n * @dev A simplified proof-of-concept smart contract for managing savings groups (Chamas) where members can contribute Ether or ERC20 tokens.\n * The contract includes basic functionalities for group creation, contributions, grantee selection, and withdrawals.\n */\ncontract ChamaGroupV3 is ReentrancyGuard, Ownable {\n    using Counters for Counters.Counter;\n    using SafeERC20 for IERC20;\n    using Address for address payable;\n\n    Counters.Counter nextId;\n\n    enum STATUS {\n        ACTIVE,\n        DELETED\n    }\n\n    struct Group {\n        uint id;\n        address creator;\n        string name;\n        string description;\n        STATUS status;\n        uint contributionAmount;\n        uint contributionTimeline;\n        uint savingsSplit; // Percentage out of 10000 (e.g., 5000 represents 50%)\n        uint lastContributionTime;\n        address[] contributors;\n        mapping(address => uint256) etherContributions;\n        mapping(address => mapping(address => uint256)) tokenContributions;\n        mapping(address => bool) approvedMembers;\n        mapping(address => uint256) votingPower;\n        address selectedGrantee;\n        address[] allowedTokens;\n        uint totalContributions;\n        bool granteeApproved; // Tracks if the grantee is approved to withdraw\n        bool hasWithdrawn; // Tracks if the grantee has withdrawn in the current period\n    }\n\n    mapping(uint => Group) groups;\n    mapping(address => uint[]) contributorGroups;\n     uint256 public maxBatchSize = 100;\n\n    event GroupCreated(uint indexed groupId, address groupCreator, string name, string description, STATUS status);\n    event ContributionMade(uint indexed groupId, address indexed contributor, uint amount, address tokenAddress);\n    event MemberApproved(uint indexed groupId, address indexed member);\n    event GranteeSelected(uint indexed groupId, address indexed grantee);\n    event GroupDeleted(uint indexed groupId, address groupCreator, STATUS status);\n    event Withdrawal(address indexed contributor, uint amount, address tokenAddress);\n    event MemberAddedByOwner(uint indexed groupId, address indexed member);\n    event MembersAddedByOwner(uint indexed groupId, uint numberOfMembers);\n    event MemberRevoked(uint indexed groupId, address indexed member);\n\n    constructor() {\n        nextId.increment(); // Start IDs from 1\n    }\n\n    modifier groupExists(uint groupId) {\n        require(groups[groupId].id != 0, \"Group does not exist\");\n        _;\n    }\n\n    modifier onlyGroupCreator(uint groupId) {\n        require(msg.sender == groups[groupId].creator, \"Only the group creator can perform this action\");\n        _;\n    }\n\n    modifier onlyApprovedMember(uint groupId) {\n        require(groups[groupId].approvedMembers[msg.sender], \"You are not an approved member\");\n        _;\n    }\n\n    modifier onlySelectedGrantee(uint groupId) {\n        require(msg.sender == groups[groupId].selectedGrantee, \"You are not the selected grantee\");\n        _;\n    }\n\n    /**\n     * @dev Creates a new savings group with the specified parameters.\n     * @param _name The name of the group.\n     * @param _description The description of the group.\n     * @param _contributionAmount The fixed contribution amount for all members, denoted in the smallest unit (e.g., wei for Ether, or token decimals for ERC20).\n     * @param _contributionTimeline The timeline in seconds for contributions.\n     * @param _savingsSplit The percentage out of 10000 for the savings split.\n     * @param _allowedTokens An array of allowed ERC20 token addresses for contributions.\n     */\n    function createGroup(\n        string memory _name,\n        string memory _description,\n        uint _contributionAmount,\n        uint _contributionTimeline,\n        uint _savingsSplit,\n        address[] memory _allowedTokens\n    ) public nonReentrant {\n        require(bytes(_name).length > 0, \"Name must not be empty\");\n        require(bytes(_description).length > 0, \"Description must not be empty\");\n        require(_contributionAmount > 0, \"Contribution amount must be greater than zero\");\n        require(_contributionTimeline > 0, \"Contribution timeline must be greater than zero\");\n        require(_savingsSplit <= 10000, \"Savings split must be a percentage (0-10000)\");\n\n        Group storage newGroup = groups[nextId.current()];\n        newGroup.id = nextId.current();\n        newGroup.creator = msg.sender;\n        newGroup.name = _name;\n        newGroup.description = _description;\n        newGroup.status = STATUS.ACTIVE;\n        newGroup.contributionAmount = _contributionAmount;\n        newGroup.contributionTimeline = _contributionTimeline;\n        newGroup.savingsSplit = _savingsSplit;\n        newGroup.contributors.push(msg.sender);\n        newGroup.approvedMembers[msg.sender] = true;\n        newGroup.allowedTokens = _allowedTokens;\n\n        contributorGroups[msg.sender].push(nextId.current());\n\n        emit GroupCreated(nextId.current(), msg.sender, _name, _description, STATUS.ACTIVE);\n\n        nextId.increment();\n    }\n\n    /**\n     * @dev Approves a new member to join the specified group.\n     * @param groupId The ID of the group.\n     * @param newMember The address of the new member.\n     */\n    function approveMember(uint groupId, address newMember) public nonReentrant groupExists(groupId) onlyGroupCreator(groupId) {\n        _approveMemberInternal(groupId, newMember);\n    }\n\n    /**\n     * @dev Allows the contract owner to add a new member to a group.\n     * @param groupId The ID of the group.\n     * @param newMember The address of the new member.\n     */\n    function addMemberByOwner(uint groupId, address newMember) public nonReentrant onlyGroupCreator(groupId) groupExists(groupId) {\n        _approveMemberInternal(groupId, newMember);\n        emit MemberAddedByOwner(groupId, newMember);\n    }\n\n    /**\n     * @dev Allows the contract owner to add new members to a group.\n     * @param groupId The ID of the group.\n     * @param newMembers The address of the new member.\n     */\n    function addMembersByOwner(uint groupId, address[] memory newMembers) public nonReentrant onlyGroupCreator(groupId) groupExists(groupId) {\n        require(newMembers.length > 0, \"No members provided.\");\n        require(newMembers.length <= maxBatchSize, \"Batch size exceeds maximum allowed for new members.\");\n\n        for (uint i = 0; i < newMembers.length; i++) {\n          groups[groupId].contributors.push(newMembers[i]);\n          groups[groupId].approvedMembers[newMembers[i]] = false; // set to false by default\n          }\n        emit MembersAddedByOwner(groupId, newMembers.length);\n    }\n\n    /**\n     * @dev Allows the contract owner to revoke member's approval status.\n     * @param groupId The ID of the group.\n     * @param member The address of the revoked member.\n     */\n\n    function revokeMemberApproval(uint groupId, address member) public nonReentrant onlyGroupCreator(groupId) groupExists(groupId) {\n        Group storage group = groups[groupId];\n        group.approvedMembers[member] = false;\n\n        emit MemberRevoked(groupId, member);\n    }\n\n    /**\n     * @dev Contributes Ether or ERC20 tokens to the specified group.\n     * @param groupId The ID of the group.\n     * @param tokenAddress The address of the ERC20 token (use 0x0000000000000000000000000000000000000000 for Ether).\n     * @param tokenAmount The amount of ERC20 tokens to contribute, in the token's smallest unit.\n     */\n    function contribute(uint groupId, address tokenAddress, uint tokenAmount) public payable nonReentrant groupExists(groupId) onlyApprovedMember(groupId) {\n        Group storage group = groups[groupId];\n        require(group.status == STATUS.ACTIVE, \"Group is not active\");\n        require(block.timestamp >= group.lastContributionTime + group.contributionTimeline, \"Contribution timeline not met\");\n        require(block.timestamp < group.lastContributionTime + group.contributionTimeline + 1 days, \"Contribution period has ended\");\n\n        bool isEther = tokenAddress == address(0);\n        uint256 valueToGrantee = (group.savingsSplit * group.contributionAmount) / 10000;\n        uint256 valueToSave = group.contributionAmount - valueToGrantee;\n\n        if (isEther) {\n            require(msg.value == group.contributionAmount, \"Incorrect Ether contribution amount\");\n            group.etherContributions[msg.sender] += valueToSave;\n            group.etherContributions[group.selectedGrantee] += valueToGrantee;\n        } else {\n            require(tokenAmount == group.contributionAmount, \"Incorrect token contribution amount\");\n            require(isAllowedToken(group, tokenAddress), \"Token not allowed for this group\");\n\n            // Safe transfer with try/catch for non-standard tokens\n            IERC20(tokenAddress).safeTransferFrom(msg.sender, address(this), tokenAmount);\n            group.tokenContributions[msg.sender][tokenAddress] += valueToSave;\n            group.tokenContributions[group.selectedGrantee][tokenAddress] += valueToGrantee;\n        }\n\n        group.totalContributions += group.contributionAmount;\n        group.lastContributionTime = block.timestamp;\n        group.granteeApproved = true; // Approve the grantee for withdrawal\n        group.hasWithdrawn = false; // Reset the withdrawal flag for the new period\n\n        if (!isContributor(group, msg.sender)) {\n            group.contributors.push(msg.sender);\n            contributorGroups[msg.sender].push(groupId);\n        }\n\n        // Update voting power based on contribution\n        group.votingPower[msg.sender] += valueToGrantee;\n\n        emit ContributionMade(groupId, msg.sender, isEther ? msg.value : tokenAmount, tokenAddress);\n\n        // Automatically select the next grantee after each contribution\n        selectGranteeByVoting(groupId);\n    }\n\n    /**\n     * @dev Selects the next grantee using a weighted voting system.\n     * Only approved members can vote.\n     * @param groupId The ID of the group.\n     */\n    function selectGranteeByVoting(uint groupId) internal groupExists(groupId) {\n        Group storage group = groups[groupId];\n        uint256 highestVotes = 0;\n        address newGrantee;\n\n        for (uint i = 0; i < group.contributors.length; i++) {\n            address contributor = group.contributors[i];\n            if (group.approvedMembers[contributor] && group.votingPower[contributor] > highestVotes) {\n                highestVotes = group.votingPower[contributor];\n                newGrantee = contributor;\n            }\n        }\n\n        group.selectedGrantee = newGrantee;\n\n        emit GranteeSelected(groupId, group.selectedGrantee);\n    }\n\n    /**\n     * @dev Withdraws Ether or ERC20 tokens for the selected grantee.\n     * Only the grantee can withdraw, and only once per contribution period.\n     * @param groupId The ID of the group.\n     * @param tokenAddress The address of the ERC20 token (use 0x0000000000000000000000000000000000000000 for Ether).\n     */\n    function withdraw(uint groupId, address tokenAddress) public nonReentrant groupExists(groupId) onlySelectedGrantee(groupId) {\n        Group storage group = groups[groupId];\n        require(group.granteeApproved, \"Grantee withdrawal not approved\");\n        require(!group.hasWithdrawn, \"Withdrawal already made in this period\");\n        require(group.status == STATUS.ACTIVE, \"Group is not active\");\n\n        bool isEther = tokenAddress == address(0);\n        uint256 amount;\n\n        if (isEther) {\n            amount = group.etherContributions[msg.sender];\n            require(amount > 0, \"No Ether to withdraw\");\n            group.etherContributions[msg.sender] = 0;\n            payable(msg.sender).sendValue(amount);\n        } else {\n            amount = group.tokenContributions[msg.sender][tokenAddress];\n            require(amount > 0, \"No tokens to withdraw\");\n            group.tokenContributions[msg.sender][tokenAddress] = 0;\n\n            // Safe transfer with try/catch for non-standard tokens\n            IERC20(tokenAddress).safeTransfer(msg.sender, amount);\n        }\n\n        group.hasWithdrawn = true; // Mark the withdrawal as completed for the period\n        group.granteeApproved = false; // Revoke approval after withdrawal\n\n        emit Withdrawal(msg.sender, amount, tokenAddress);\n    }\n\n    /**\n     * @dev Deletes a group and marks it as inactive.\n     * @param groupId The ID of the group.\n     */\n    function deleteGroup(uint groupId) public nonReentrant groupExists(groupId) onlyGroupCreator(groupId) {\n        Group storage group = groups[groupId];\n        require(group.status == STATUS.ACTIVE, \"Group is not active\");\n\n        group.status = STATUS.DELETED;\n\n        emit GroupDeleted(groupId, msg.sender, STATUS.DELETED);\n    }\n\n    /**\n     * @dev Retrieves the details of a group by its ID.\n     * @param groupId The ID of the group.\n     * @return id The ID of the group.\n     * @return creator The creator of the group.\n     * @return name The name of the group.\n     * @return description The description of the group.\n     * @return status The current status of the group.\n     * @return contributionAmount The fixed contribution amount for the group.\n     * @return contributionTimeline The contribution timeline for the group.\n     * @return savingsSplit The savings split percentage for the group.\n     * @return selectedGrantee The currently selected grantee.\n     */\n    function getGroupById(uint groupId) public view groupExists(groupId) returns (\n        uint id,\n        address creator,\n        string memory name,\n        string memory description,\n        STATUS status,\n        uint contributionAmount,\n        uint contributionTimeline,\n        uint savingsSplit,\n        address selectedGrantee\n    ) {\n        Group storage group = groups[groupId];\n\n        return (\n            group.id,\n            group.creator,\n            group.name,\n            group.description,\n            group.status,\n            group.contributionAmount,\n            group.contributionTimeline,\n            group.savingsSplit,\n            group.selectedGrantee\n        );\n    }\n\n    /**\n     * @dev Retrieves the IDs of groups a contributor belongs to.\n     * @param contributor The address of the contributor.\n     * @return An array of group IDs the contributor belongs to.\n     */\n    function getGroupsByContributor(address contributor) public view returns (uint[] memory) {\n        return contributorGroups[contributor];\n    }\n\n    /**\n     * @dev Checks if a token is allowed for a group.\n     * @param group The group to check.\n     * @param tokenAddress The address of the token to check.\n     * @return True if the token is allowed, false otherwise.\n     */\n    function isAllowedToken(Group storage group, address tokenAddress) internal view returns (bool) {\n        for (uint i = 0; i < group.allowedTokens.length; i++) {\n            if (group.allowedTokens[i] == tokenAddress) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @dev Checks if an address is a contributor in the group.\n     * @param group The group to check.\n     * @param contributor The address to check.\n     * @return True if the address is a contributor, false otherwise.\n     */\n    function isContributor(Group storage group, address contributor) internal view returns (bool) {\n        for (uint i = 0; i < group.contributors.length; i++) {\n            if (group.contributors[i] == contributor) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @dev Internal function to approve a new member to join the specified group.\n     * @param groupId The ID of the group.\n     * @param newMember The address of the new member.\n     */\n    function _approveMemberInternal(uint groupId, address newMember) internal {\n        Group storage group = groups[groupId];\n        group.approvedMembers[newMember] = true;\n\n        emit MemberApproved(groupId, newMember);\n    }\n\n    /**\n     * @dev Fallback function that reverts any Ether sent to the contract.\n     */\n    fallback() external payable {\n        revert(\"Fallback function triggered, no Ether accepted\");\n    }\n\n    /**\n     * @dev Receive function that reverts any direct Ether payments.\n     */\n    receive() external payable {\n        revert(\"Contract does not accept direct Ether payments\");\n    }\n}\n"
    },
    "contracts/ChamaGroup4.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n/**\n * @title ChamaGroupV4\n * @dev A smart contract for managing savings groups (Chamas) where members can contribute Ether or ERC20 tokens.\n * The contract includes functionalities for group creation, contributions, grantee selection, withdrawals, and group archiving.\n */\ncontract ChamaGroupV4 is ReentrancyGuard, Ownable {\n    using Counters for Counters.Counter;\n    using SafeERC20 for IERC20;\n    using Address for address payable;\n\n    Counters.Counter private nextId;\n\n    enum STATUS {\n        ACTIVE,\n        ARCHIVED\n    }\n\n    struct Group {\n        uint id;\n        address creator;\n        string name;\n        string description;\n        STATUS status;\n        uint contributionAmount;\n        uint contributionTimeline;\n        uint savingsRatio; // Percentage out of 10000 (e.g., 5000 represents 50%)\n        uint lastContributionTime;\n        address[] contributors;\n        mapping(address => uint256) etherContributions;\n        mapping(address => mapping(address => uint256)) tokenContributions;\n        mapping(address => bool) approvedMembers;\n        mapping(address => uint256) votingPower;\n        address selectedGrantee;\n        address[] allowedTokens;\n        uint totalContributions;\n        bool granteeApproved; // Tracks if the grantee is approved to withdraw\n        bool hasWithdrawn; // Tracks if the grantee has withdrawn in the current period\n    }\n\n    mapping(uint => Group) private groups;\n    mapping(address => uint[]) private contributorGroups;\n    uint256 public maxBatchSize = 100;\n\n    event GroupCreated(uint indexed groupId, address groupCreator, string name, string description, STATUS status);\n    event ContributionMade(uint indexed groupId, address indexed contributor, uint amount, address tokenAddress);\n    event MemberApproved(uint indexed groupId, address indexed member);\n    event GranteeSelected(uint indexed groupId, address indexed grantee);\n    event GroupArchived(uint indexed groupId, address groupCreator, STATUS status);\n    event Withdrawal(address indexed contributor, uint amount, address tokenAddress);\n    event MemberAddedByOwner(uint indexed groupId, address indexed member);\n    event MembersAddedByOwner(uint indexed groupId, uint numberOfMembers);\n    event MemberRevoked(uint indexed groupId, address indexed member);\n    event MemberRemoved(uint indexed groupId, address indexed member);\n    event GroupUpdated(uint indexed groupId, string description, uint contributionAmount, uint contributionTimeline, uint savingsRatio);\n    event TokenAdded(uint indexed groupId, address indexed tokenAddress);\n    event TokensRemoved(uint indexed groupId, address[] tokenAddresses);\n\n    constructor() {\n        nextId.increment(); // Start IDs from 1\n    }\n\n    modifier groupExists(uint groupId) {\n        require(groups[groupId].id != 0, \"Group does not exist\");\n        _;\n    }\n\n    modifier onlyGroupCreator(uint groupId) {\n        require(msg.sender == groups[groupId].creator, \"Only the group creator can perform this action\");\n        _;\n    }\n\n    modifier onlyApprovedMember(uint groupId) {\n        require(groups[groupId].approvedMembers[msg.sender], \"You are not an approved member\");\n        _;\n    }\n\n    modifier onlySelectedGrantee(uint groupId) {\n        require(msg.sender == groups[groupId].selectedGrantee, \"You are not the selected grantee\");\n        _;\n    }\n\n    /**\n     * @dev Creates a new savings group with the specified parameters.\n     * @param _name The name of the group.\n     * @param _description The description of the group.\n     * @param _contributionAmount The fixed contribution amount for all members, denoted in the smallest unit (e.g., wei for Ether, or token decimals for ERC20).\n     * @param _contributionTimeline The timeline in seconds for contributions.\n     * @param _savingsRatio The percentage out of 10000 for the savings split.\n     * @param _allowedTokens An array of allowed ERC20 token addresses for contributions.\n     */\n    function createGroup(\n        string memory _name,\n        string memory _description,\n        uint _contributionAmount,\n        uint _contributionTimeline,\n        uint _savingsRatio,\n        address[] memory _allowedTokens\n    ) public nonReentrant {\n        require(bytes(_name).length > 0, \"Name must not be empty\");\n        require(bytes(_description).length > 0, \"Description must not be empty\");\n        require(_contributionAmount > 0, \"Contribution amount must be greater than zero\");\n        require(_contributionTimeline > 0, \"Contribution timeline must be greater than zero\");\n        require(_savingsRatio <= 10000, \"Savings ratio must be a percentage (0-10000)\");\n\n        Group storage newGroup = groups[nextId.current()];\n        newGroup.id = nextId.current();\n        newGroup.creator = msg.sender;\n        newGroup.name = _name;\n        newGroup.description = _description;\n        newGroup.status = STATUS.ACTIVE;\n        newGroup.contributionAmount = _contributionAmount;\n        newGroup.contributionTimeline = _contributionTimeline;\n        newGroup.savingsRatio = _savingsRatio;\n        newGroup.contributors.push(msg.sender);\n        newGroup.approvedMembers[msg.sender] = true;\n        newGroup.allowedTokens = _allowedTokens;\n\n        contributorGroups[msg.sender].push(nextId.current());\n\n        emit GroupCreated(nextId.current(), msg.sender, _name, _description, STATUS.ACTIVE);\n\n        nextId.increment();\n    }\n\n    /**\n     * @dev Archives a group and marks it as inactive.\n     * @param groupId The ID of the group.\n     */\n    function archiveGroup(uint groupId) public nonReentrant groupExists(groupId) onlyGroupCreator(groupId) {\n        Group storage group = groups[groupId];\n        require(group.status == STATUS.ACTIVE, \"Group is not active\");\n\n        group.status = STATUS.ARCHIVED;\n\n        emit GroupArchived(groupId, msg.sender, STATUS.ARCHIVED);\n    }\n\n    /**\n     * @dev Updates group settings if members agree.\n     * @param groupId The ID of the group.\n     * @param _description The new description of the group.\n     * @param _contributionAmount The new contribution amount for the group.\n     * @param _contributionTimeline The new contribution timeline for the group.\n     * @param _savingsRatio The new savings ratio for the group.\n     */\n    function updateGroup(\n        uint groupId,\n        string memory _description,\n        uint _contributionAmount,\n        uint _contributionTimeline,\n        uint _savingsRatio\n    ) public nonReentrant groupExists(groupId) onlyGroupCreator(groupId) {\n        require(bytes(_description).length > 0, \"Description must not be empty\");\n        require(_contributionAmount > 0, \"Contribution amount must be greater than zero\");\n        require(_contributionTimeline > 0, \"Contribution timeline must be greater than zero\");\n        require(_savingsRatio <= 10000, \"Savings ratio must be a percentage (0-10000)\");\n\n        Group storage group = groups[groupId];\n        group.description = _description;\n        group.contributionAmount = _contributionAmount;\n        group.contributionTimeline = _contributionTimeline;\n        group.savingsRatio = _savingsRatio;\n\n        emit GroupUpdated(groupId, _description, _contributionAmount, _contributionTimeline, _savingsRatio);\n    }\n\n    /**\n     * @dev Adds a new token to the allowed tokens list for a group.\n     * @param groupId The ID of the group.\n     * @param tokenAddress The address of the ERC20 token to add.\n     */\n    function addAllowedToken(uint groupId, address tokenAddress) public nonReentrant groupExists(groupId) onlyGroupCreator(groupId) {\n        Group storage group = groups[groupId];\n        require(!isAllowedToken(group, tokenAddress), \"Token is already allowed\");\n\n        group.allowedTokens.push(tokenAddress);\n        emit TokenAdded(groupId, tokenAddress);\n    }\n\n    /**\n     * @dev Removes multiple tokens from the allowed tokens list for a group.\n     * @param groupId The ID of the group.\n     * @param tokenAddresses The array of ERC20 token addresses to remove.\n     */\n    function removeAllowedTokens(uint groupId, address[] memory tokenAddresses) public nonReentrant groupExists(groupId) onlyGroupCreator(groupId) {\n        Group storage group = groups[groupId];\n        for (uint i = 0; i < tokenAddresses.length; i++) {\n            address tokenAddress = tokenAddresses[i];\n            uint tokenIndex = findTokenIndex(group, tokenAddress);\n            if (tokenIndex < group.allowedTokens.length) {\n                group.allowedTokens[tokenIndex] = group.allowedTokens[group.allowedTokens.length - 1];\n                group.allowedTokens.pop();\n            }\n        }\n        emit TokensRemoved(groupId, tokenAddresses);\n    }\n\n    /**\n     * @dev Allows an approved member to contribute Ether or ERC20 tokens to the specified group.\n     * @param groupId The ID of the group.\n     * @param tokenAddress The address of the ERC20 token (use 0x0000000000000000000000000000000000000000 for Ether).\n     * @param tokenAmount The amount of ERC20 tokens to contribute, in the token's smallest unit.\n     */\n    function contribute(uint groupId, address tokenAddress, uint tokenAmount) public payable nonReentrant groupExists(groupId) onlyApprovedMember(groupId) {\n        Group storage group = groups[groupId];\n        require(group.status == STATUS.ACTIVE, \"Group is not active\");\n        require(block.timestamp >= group.lastContributionTime + group.contributionTimeline, \"Contribution timeline not met\");\n        require(block.timestamp < group.lastContributionTime + group.contributionTimeline + 1 days, \"Contribution period has ended\");\n\n        bool isEther = tokenAddress == address(0);\n        uint256 valueToGrantee = (group.savingsRatio * group.contributionAmount) / 10000;\n        uint256 valueToSave = group.contributionAmount - valueToGrantee;\n\n        if (isEther) {\n            require(msg.value == group.contributionAmount, \"Incorrect Ether contribution amount\");\n            group.etherContributions[msg.sender] += valueToSave;\n            group.etherContributions[group.selectedGrantee] += valueToGrantee;\n        } else {\n            require(tokenAmount == group.contributionAmount, \"Incorrect token contribution amount\");\n            require(isAllowedToken(group, tokenAddress), \"Token not allowed for this group\");\n\n            IERC20(tokenAddress).safeTransferFrom(msg.sender, address(this), tokenAmount);\n            group.tokenContributions[msg.sender][tokenAddress] += valueToSave;\n            group.tokenContributions[group.selectedGrantee][tokenAddress] += valueToGrantee;\n        }\n\n        group.totalContributions += group.contributionAmount;\n        group.lastContributionTime = block.timestamp;\n        group.granteeApproved = true; // Approve the grantee for withdrawal\n        group.hasWithdrawn = false; // Reset the withdrawal flag for the new period\n\n        if (!isContributor(group, msg.sender)) {\n            group.contributors.push(msg.sender);\n            contributorGroups[msg.sender].push(groupId);\n        }\n\n        group.votingPower[msg.sender] += valueToGrantee;\n\n        emit ContributionMade(groupId, msg.sender, isEther ? msg.value : tokenAmount, tokenAddress);\n\n        // Automatically select the next grantee after each contribution\n        selectGranteeByVoting(groupId);\n    }\n\n    /**\n     * @dev Withdraws Ether or ERC20 tokens for the selected grantee.\n     * Only the grantee can withdraw, and only once per contribution period.\n     * @param groupId The ID of the group.\n     * @param tokenAddress The address of the ERC20 token (use 0x0000000000000000000000000000000000000000 for Ether).\n     */\n    function withdraw(uint groupId, address tokenAddress) public nonReentrant groupExists(groupId) onlySelectedGrantee(groupId) {\n        Group storage group = groups[groupId];\n        require(group.granteeApproved, \"Grantee withdrawal not approved\");\n        require(!group.hasWithdrawn, \"Withdrawal already made in this period\");\n        require(group.status == STATUS.ACTIVE || group.status == STATUS.ARCHIVED, \"Group is not active or archived\");\n\n        bool isEther = tokenAddress == address(0);\n        uint256 amount;\n\n        if (isEther) {\n            amount = group.etherContributions[msg.sender];\n            require(amount > 0, \"No Ether to withdraw\");\n            group.etherContributions[msg.sender] = 0;\n            payable(msg.sender).sendValue(amount);\n        } else {\n            amount = group.tokenContributions[msg.sender][tokenAddress];\n            require(amount > 0, \"No tokens to withdraw\");\n            group.tokenContributions[msg.sender][tokenAddress] = 0;\n\n            IERC20(tokenAddress).safeTransfer(msg.sender, amount);\n        }\n\n        group.hasWithdrawn = true; // Mark the withdrawal as completed for the period\n        group.granteeApproved = false; // Revoke approval after withdrawal\n\n        emit Withdrawal(msg.sender, amount, tokenAddress);\n    }\n\n    /**\n     * @dev Removes a member from the group, but allows them to withdraw their contributions if they meet conditions.\n     * @param groupId The ID of the group.\n     * @param member The address of the member to remove.\n     */\n    function removeMember(uint groupId, address member) public nonReentrant groupExists(groupId) onlyGroupCreator(groupId) {\n        Group storage group = groups[groupId];\n        require(group.approvedMembers[member], \"Member not approved\");\n        require(group.status == STATUS.ACTIVE || group.status == STATUS.ARCHIVED, \"Group is not active or archived\");\n\n        group.approvedMembers[member] = false;\n        emit MemberRemoved(groupId, member);\n    }\n\n    /**\n     * @dev Selects the next grantee using a weighted voting system.\n     * Only approved members can vote.\n     * @param groupId The ID of the group.\n     */\n    function selectGranteeByVoting(uint groupId) internal groupExists(groupId) {\n        Group storage group = groups[groupId];\n        uint256 highestVotes = 0;\n        address newGrantee;\n\n        for (uint i = 0; i < group.contributors.length; i++) {\n            address contributor = group.contributors[i];\n            if (group.approvedMembers[contributor] && group.votingPower[contributor] > highestVotes) {\n                highestVotes = group.votingPower[contributor];\n                newGrantee = contributor;\n            }\n        }\n\n        group.selectedGrantee = newGrantee;\n\n        emit GranteeSelected(groupId, group.selectedGrantee);\n    }\n\n    /**\n     * @dev Internal function to approve a new member to join the specified group.\n     * @param groupId The ID of the group.\n     * @param newMember The address of the new member.\n     */\n    function _approveMemberInternal(uint groupId, address newMember) internal {\n        Group storage group = groups[groupId];\n        group.approvedMembers[newMember] = true;\n\n        emit MemberApproved(groupId, newMember);\n    }\n\n    /**\n     * @dev Checks if a token is allowed for a group.\n     * @param group The group to check.\n     * @param tokenAddress The address of the token to check.\n     * @return True if the token is allowed, false otherwise.\n     */\n    function isAllowedToken(Group storage group, address tokenAddress) internal view returns (bool) {\n        for (uint i = 0; i < group.allowedTokens.length; i++) {\n            if (group.allowedTokens[i] == tokenAddress) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @dev Finds the index of a token in the allowedTokens array.\n     * @param group The group to search.\n     * @param tokenAddress The address of the token to find.\n     * @return The index of the token in the array.\n     */\n    function findTokenIndex(Group storage group, address tokenAddress) internal view returns (uint) {\n        for (uint i = 0; i < group.allowedTokens.length; i++) {\n            if (group.allowedTokens[i] == tokenAddress) {\n                return i;\n            }\n        }\n        return group.allowedTokens.length;\n    }\n\n    /**\n     * @dev Checks if an address is a contributor in the group.\n     * @param group The group to check.\n     * @param contributor The address to check.\n     * @return True if the address is a contributor, false otherwise.\n     */\n    function isContributor(Group storage group, address contributor) internal view returns (bool) {\n        for (uint i = 0; i < group.contributors.length; i++) {\n            if (group.contributors[i] == contributor) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @dev Retrieves the details of a group by its ID.\n     * @param groupId The ID of the group.\n     * @return id The ID of the group.\n     * @return creator The creator of the group.\n     * @return name The name of the group.\n     * @return description The description of the group.\n     * @return status The current status of the group.\n     * @return contributionAmount The fixed contribution amount for the group.\n     * @return contributionTimeline The contribution timeline for the group.\n     * @return savingsRatio The savings ratio percentage for the group.\n     * @return selectedGrantee The currently selected grantee.\n     */\n    function getGroupById(uint groupId) public view groupExists(groupId) returns (\n        uint id,\n        address creator,\n        string memory name,\n        string memory description,\n        STATUS status,\n        uint contributionAmount,\n        uint contributionTimeline,\n        uint savingsRatio,\n        address selectedGrantee\n    ) {\n        Group storage group = groups[groupId];\n\n        return (\n            group.id,\n            group.creator,\n            group.name,\n            group.description,\n            group.status,\n            group.contributionAmount,\n            group.contributionTimeline,\n            group.savingsRatio,\n            group.selectedGrantee\n        );\n    }\n\n    /**\n     * @dev Retrieves the IDs of groups a contributor belongs to.\n     * @param contributor The address of the contributor.\n     * @return An array of group IDs the contributor belongs to.\n     */\n    function getGroupsByContributor(address contributor) public view returns (uint[] memory) {\n        return contributorGroups[contributor];\n    }\n\n    /**\n     * @dev Fallback function that reverts any Ether sent to the contract.\n     */\n    fallback() external payable {\n        revert(\"Fallback function triggered, no Ether accepted\");\n    }\n\n    /**\n     * @dev Receive function that reverts any direct Ether payments.\n     */\n    receive() external payable {\n        revert(\"Contract does not accept direct Ether payments\");\n    }\n}\n"
    },
    "contracts/ChamaGroup5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n/**\n * @title ChamaGroupV5\n * @dev A smart contract for managing savings groups (Chamas) where members can contribute Ether or ERC20 tokens.\n * The contract includes functionalities for group creation, contributions, grantee selection, withdrawals, and group archiving.\n */\ncontract ChamaGroupV5 is ReentrancyGuard, Ownable {\n    using Counters for Counters.Counter;\n    using SafeERC20 for IERC20;\n    using Address for address payable;\n\n    Counters.Counter public nextId;\n    uint constant MIN_GRANTEE_MEMBERSHIP_DURATION = 90 days; // Minimum time requirement before becoming a selected grantee\n    uint constant MIN_CONTRIBUTION_TIMELINE = 1 hours; // Minimum contribution timeline is 1 hour\n\n    enum STATUS {\n        ACTIVE,\n        ARCHIVED\n    }\n\n    struct Group {\n        uint id;\n        address creator;\n        string name;\n        string description;\n        STATUS status;\n        uint contributionAmount;\n        uint contributionTimeline;\n        uint savingsRatio; // Percentage out of 10000 (e.g., 5000 represents 50%)\n        uint lastContributionTime;\n        address[] contributors;\n        mapping(address => uint256) etherContributions;\n        mapping(address => mapping(address => uint256)) tokenContributions;\n        mapping(address => bool) approvedMembers;\n        mapping(address => uint256) votingPower;\n        mapping(address => uint256) joinTime; // Timestamp when a member joined the group\n        mapping(address => uint256) etherOwed; // Tracks Ether owed to each contributor\n        address selectedGrantee;\n        address[] allowedTokens;\n        uint totalContributions;\n        bool granteeApproved; // Tracks if the grantee is approved to withdraw\n        bool hasWithdrawn; // Tracks if the grantee has withdrawn in the current period\n    }\n\n    mapping(uint => Group) private groups;\n    mapping(address => uint[]) private contributorGroups;\n    uint256 public maxBatchSize = 100;\n\n    event GroupCreated(uint indexed groupId, address groupCreator, string name, string description, STATUS status);\n    event ContributionMade(uint indexed groupId, address indexed contributor, uint amount, address tokenAddress);\n    event MemberApproved(uint indexed groupId, address indexed member);\n    event GranteeSelected(uint indexed groupId, address indexed grantee);\n    event GroupArchived(uint indexed groupId, address groupCreator, STATUS status);\n    event Withdrawal(address indexed contributor, uint amount, address tokenAddress);\n    event MemberAddedByOwner(uint indexed groupId, address indexed member);\n    event MembersAddedByOwner(uint indexed groupId, uint numberOfMembers);\n    event MemberRevoked(uint indexed groupId, address indexed member);\n    event MemberRemoved(uint indexed groupId, address indexed member);\n    event GroupUpdated(uint indexed groupId, string description, uint contributionAmount, uint contributionTimeline, uint savingsRatio);\n    event TokenAdded(uint indexed groupId, address indexed tokenAddress);\n    event TokensRemoved(uint indexed groupId, address[] tokenAddresses);\n\n    constructor() {\n        nextId.increment(); // Start IDs from 1\n    }\n\n    modifier groupExists(uint groupId) {\n        require(groups[groupId].id != 0, \"Group does not exist\");\n        _;\n    }\n\n    modifier onlyGroupCreator(uint groupId) {\n        require(msg.sender == groups[groupId].creator, \"Only the group creator can perform this action\");\n        _;\n    }\n\n    modifier onlyApprovedMember(uint groupId) {\n        require(groups[groupId].approvedMembers[msg.sender], \"You are not an approved member\");\n        _;\n    }\n\n    modifier onlySelectedGrantee(uint groupId) {\n        require(msg.sender == groups[groupId].selectedGrantee, \"You are not the selected grantee\");\n        _;\n    }\n\n    /**\n     * @dev Creates a new savings group with the specified parameters.\n     * @param _name The name of the group.\n     * @param _description The description of the group.\n     * @param _contributionAmount The fixed contribution amount for all members, denoted in the smallest unit (e.g., wei for Ether, or token decimals for ERC20).\n     * @param _contributionTimelineInSeconds The timeline for contributions, in seconds.\n     * @param _savingsRatio The percentage out of 10000 for the savings split.\n     * @param _allowedTokens An array of allowed ERC20 token addresses for contributions.\n     */\n    function createGroup(\n        string memory _name,\n        string memory _description,\n        uint _contributionAmount,\n        uint _contributionTimelineInSeconds,\n        uint _savingsRatio,\n        address[] memory _allowedTokens\n    ) public nonReentrant {\n        require(bytes(_name).length > 0, \"Name must not be empty\");\n        require(bytes(_description).length > 0, \"Description must not be empty\");\n        require(_contributionAmount > 0, \"Contribution amount must be greater than zero\");\n        require(_contributionTimelineInSeconds >= MIN_CONTRIBUTION_TIMELINE, \"Contribution timeline must be at least 1 hour\");\n        require(_savingsRatio <= 10000, \"Savings ratio must be a percentage (0-10000)\");\n\n        Group storage newGroup = groups[nextId.current()];\n        newGroup.id = nextId.current();\n        newGroup.creator = msg.sender;\n        newGroup.name = _name;\n        newGroup.description = _description;\n        newGroup.status = STATUS.ACTIVE;\n        newGroup.contributionAmount = _contributionAmount;\n        newGroup.contributionTimeline = _contributionTimelineInSeconds;\n        newGroup.savingsRatio = _savingsRatio;\n        newGroup.contributors.push(msg.sender);\n        newGroup.approvedMembers[msg.sender] = true;\n        newGroup.joinTime[msg.sender] = block.timestamp; // Record the time the member joined\n        newGroup.allowedTokens = _allowedTokens;\n\n        contributorGroups[msg.sender].push(nextId.current());\n\n        emit GroupCreated(nextId.current(), msg.sender, _name, _description, STATUS.ACTIVE);\n\n        nextId.increment();\n    }\n\n    /**\n     * @dev Archives a group and marks it as inactive.\n     * @param groupId The ID of the group.\n     */\n    function archiveGroup(uint groupId) public nonReentrant groupExists(groupId) onlyGroupCreator(groupId) {\n        Group storage group = groups[groupId];\n        require(group.status == STATUS.ACTIVE, \"Group is not active\");\n\n        group.status = STATUS.ARCHIVED;\n\n        emit GroupArchived(groupId, msg.sender, STATUS.ARCHIVED);\n    }\n\n    /**\n     * @dev Updates group settings if members agree.\n     * @param groupId The ID of the group.\n     * @param _description The new description of the group.\n     * @param _contributionAmount The new contribution amount for the group.\n     * @param _contributionTimelineInSeconds The new contribution timeline for the group, in seconds.\n     * @param _savingsRatio The new savings ratio for the group.\n     */\n    function updateGroup(\n        uint groupId,\n        string memory _description,\n        uint _contributionAmount,\n        uint _contributionTimelineInSeconds,\n        uint _savingsRatio\n    ) public nonReentrant groupExists(groupId) onlyGroupCreator(groupId) {\n        require(bytes(_description).length > 0, \"Description must not be empty\");\n        require(_contributionAmount > 0, \"Contribution amount must be greater than zero\");\n        require(_contributionTimelineInSeconds >= MIN_CONTRIBUTION_TIMELINE, \"Contribution timeline must be at least 1 hour\");\n        require(_savingsRatio <= 10000, \"Savings ratio must be a percentage (0-10000)\");\n\n        Group storage group = groups[groupId];\n        group.description = _description;\n        group.contributionAmount = _contributionAmount;\n        group.contributionTimeline = _contributionTimelineInSeconds;\n        group.savingsRatio = _savingsRatio;\n\n        emit GroupUpdated(groupId, _description, _contributionAmount, _contributionTimelineInSeconds, _savingsRatio);\n    }\n\n    /**\n     * @dev Adds a new token to the allowed tokens list for a group.\n     * @param groupId The ID of the group.\n     * @param tokenAddress The address of the ERC20 token to add.\n     */\n    function addAllowedToken(uint groupId, address tokenAddress) public nonReentrant groupExists(groupId) onlyGroupCreator(groupId) {\n        Group storage group = groups[groupId];\n        require(!isAllowedToken(group, tokenAddress), \"Token is already allowed\");\n\n        group.allowedTokens.push(tokenAddress);\n        emit TokenAdded(groupId, tokenAddress);\n    }\n\n    /**\n     * @dev Removes multiple tokens from the allowed tokens list for a group.\n     * @param groupId The ID of the group.\n     * @param tokenAddresses The array of ERC20 token addresses to remove.\n     */\n    function removeAllowedTokens(uint groupId, address[] memory tokenAddresses) public nonReentrant groupExists(groupId) onlyGroupCreator(groupId) {\n        Group storage group = groups[groupId];\n        for (uint i = 0; i < tokenAddresses.length; i++) {\n            address tokenAddress = tokenAddresses[i];\n            uint tokenIndex = findTokenIndex(group, tokenAddress);\n            if (tokenIndex < group.allowedTokens.length) {\n                group.allowedTokens[tokenIndex] = group.allowedTokens[group.allowedTokens.length - 1];\n                group.allowedTokens.pop();\n            }\n        }\n        emit TokensRemoved(groupId, tokenAddresses);\n    }\n\n    /**\n     * @dev Allows an approved member to contribute Ether or ERC20 tokens to the specified group.\n     * @param groupId The ID of the group.\n     * @param tokenAddress The address of the ERC20 token (use 0x0000000000000000000000000000000000000000 for Ether).\n     * @param tokenAmount The amount of ERC20 tokens to contribute, in the token's smallest unit.\n     */\n    function contribute(uint groupId, address tokenAddress, uint tokenAmount) public payable nonReentrant groupExists(groupId) onlyApprovedMember(groupId) {\n        Group storage group = groups[groupId];\n        require(group.status == STATUS.ACTIVE, \"Group is not active\");\n        require(block.timestamp >= group.lastContributionTime + group.contributionTimeline, \"Contribution timeline not met\");\n        require(block.timestamp < group.lastContributionTime + group.contributionTimeline + 1 days, \"Contribution period has ended\");\n\n        bool isEther = tokenAddress == address(0);\n        uint256 valueToGrantee = (group.savingsRatio * group.contributionAmount) / 10000;\n        uint256 valueToSave = group.contributionAmount - valueToGrantee;\n\n        if (isEther) {\n            require(msg.value == group.contributionAmount, \"Incorrect Ether contribution amount\");\n\n            // Track the contributor's Ether owed\n            group.etherOwed[msg.sender] += valueToSave;\n\n            // Track the selected grantee's Ether owed\n            group.etherOwed[group.selectedGrantee] += valueToGrantee;\n\n        } else {\n            require(tokenAmount == group.contributionAmount, \"Incorrect token contribution amount\");\n            require(isAllowedToken(group, tokenAddress), \"Token not allowed for this group\");\n\n            IERC20(tokenAddress).safeTransferFrom(msg.sender, address(this), tokenAmount);\n\n            // Track the contributor's token owed\n            group.tokenContributions[msg.sender][tokenAddress] += valueToSave;\n\n            // Track the selected grantee's token owed\n            group.tokenContributions[group.selectedGrantee][tokenAddress] += valueToGrantee;\n        }\n\n        group.totalContributions += group.contributionAmount;\n        group.lastContributionTime = block.timestamp;\n        group.granteeApproved = true; // Approve the grantee for withdrawal\n        group.hasWithdrawn = false; // Reset the withdrawal flag for the new period\n\n        if (!isContributor(group, msg.sender)) {\n            group.contributors.push(msg.sender);\n            contributorGroups[msg.sender].push(groupId);\n            group.joinTime[msg.sender] = block.timestamp; // Record the join time\n        }\n\n        group.votingPower[msg.sender] += valueToGrantee;\n\n        emit ContributionMade(groupId, msg.sender, isEther ? msg.value : tokenAmount, tokenAddress);\n\n        // Automatically select the next grantee after each contribution\n        selectGranteeByVoting(groupId);\n    }\n\n    /**\n     * @dev Withdraws Ether or ERC20 tokens for the selected grantee or a contributor claiming their owed balance.\n     * Only the grantee can withdraw the allocated amount for the current period.\n     * Contributors can withdraw their owed balances after the saving period or if the group is archived.\n     * @param groupId The ID of the group.\n     * @param tokenAddress The address of the ERC20 token (use 0x0000000000000000000000000000000000000000 for Ether).\n     */\n    function withdraw(uint groupId, address tokenAddress) public nonReentrant groupExists(groupId) {\n        Group storage group = groups[groupId];\n        require(group.status == STATUS.ACTIVE || group.status == STATUS.ARCHIVED, \"Group is not active or archived\");\n\n        bool isEther = tokenAddress == address(0);\n        uint256 amount;\n\n        if (isEther) {\n            amount = group.etherOwed[msg.sender];\n            require(amount > 0, \"No Ether to withdraw\");\n            group.etherOwed[msg.sender] = 0; // Set balance to zero before transfer to prevent reentrancy\n\n            payable(msg.sender).sendValue(amount);\n        } else {\n            amount = group.tokenContributions[msg.sender][tokenAddress];\n            require(amount > 0, \"No tokens to withdraw\");\n            group.tokenContributions[msg.sender][tokenAddress] = 0; // Set balance to zero before transfer to prevent reentrancy\n\n            IERC20(tokenAddress).safeTransfer(msg.sender, amount);\n        }\n\n        emit Withdrawal(msg.sender, amount, tokenAddress);\n    }\n\n    /**\n     * @dev Removes a member from the group, but allows them to withdraw their contributions if they meet conditions.\n     * @param groupId The ID of the group.\n     * @param member The address of the member to remove.\n     */\n    function removeMember(uint groupId, address member) public nonReentrant groupExists(groupId) onlyGroupCreator(groupId) {\n        Group storage group = groups[groupId];\n        require(group.approvedMembers[member], \"Member not approved\");\n        require(group.status == STATUS.ACTIVE || group.status == STATUS.ARCHIVED, \"Group is not active or archived\");\n\n        group.approvedMembers[member] = false;\n        emit MemberRemoved(groupId, member);\n    }\n\n    /**\n     * @dev Simplified and fairer selection of the next grantee using a minimum membership duration.\n     * @param groupId The ID of the group.\n     */\n    function selectGranteeByVoting(uint groupId) internal groupExists(groupId) {\n        Group storage group = groups[groupId];\n        uint256 highestVotes = 0;\n        address newGrantee;\n\n        for (uint i = 0; i < group.contributors.length; i++) {\n            address contributor = group.contributors[i];\n            if (group.approvedMembers[contributor] && group.votingPower[contributor] > highestVotes && block.timestamp >= group.joinTime[contributor] + MIN_GRANTEE_MEMBERSHIP_DURATION) {\n                highestVotes = group.votingPower[contributor];\n                newGrantee = contributor;\n            }\n        }\n\n        group.selectedGrantee = newGrantee;\n\n        emit GranteeSelected(groupId, group.selectedGrantee);\n    }\n\n    /**\n     * @dev Internal function to approve a new member to join the specified group.\n     * @param groupId The ID of the group.\n     * @param newMember The address of the new member.\n     */\n    function _approveMemberInternal(uint groupId, address newMember) internal {\n        Group storage group = groups[groupId];\n        group.approvedMembers[newMember] = true;\n        group.joinTime[newMember] = block.timestamp; // Record the time the member joined\n\n        emit MemberApproved(groupId, newMember);\n    }\n\n    /**\n     * @dev Checks if a token is allowed for a group.\n     * @param group The group to check.\n     * @param tokenAddress The address of the token to check.\n     * @return True if the token is allowed, false otherwise.\n     */\n    function isAllowedToken(Group storage group, address tokenAddress) internal view returns (bool) {\n        for (uint i = 0; i < group.allowedTokens.length; i++) {\n            if (group.allowedTokens[i] == tokenAddress) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @dev Finds the index of a token in the allowedTokens array.\n     * @param group The group to search.\n     * @param tokenAddress The address of the token to find.\n     * @return The index of the token in the array.\n     */\n    function findTokenIndex(Group storage group, address tokenAddress) internal view returns (uint) {\n        for (uint i = 0; i < group.allowedTokens.length; i++) {\n            if (group.allowedTokens[i] == tokenAddress) {\n                return i;\n            }\n        }\n        return group.allowedTokens.length;\n    }\n\n    /**\n     * @dev Checks if an address is a contributor in the group.\n     * @param group The group to check.\n     * @param contributor The address to check.\n     * @return True if the address is a contributor, false otherwise.\n     */\n    function isContributor(Group storage group, address contributor) internal view returns (bool) {\n        for (uint i = 0; i < group.contributors.length; i++) {\n            if (group.contributors[i] == contributor) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @dev Retrieves the details of a group by its ID.\n     * @param groupId The ID of the group.\n     * @return id The ID of the group.\n     * @return creator The creator of the group.\n     * @return name The name of the group.\n     * @return description The description of the group.\n     * @return status The current status of the group.\n     * @return contributionAmount The fixed contribution amount for the group.\n     * @return contributionTimeline The contribution timeline for the group.\n     * @return savingsRatio The savings ratio percentage for the group.\n     * @return selectedGrantee The currently selected grantee.\n     */\n    function getGroupById(uint groupId) public view groupExists(groupId) returns (\n        uint id,\n        address creator,\n        string memory name,\n        string memory description,\n        STATUS status,\n        uint contributionAmount,\n        uint contributionTimeline,\n        uint savingsRatio,\n        address selectedGrantee\n    ) {\n        Group storage group = groups[groupId];\n\n        return (\n            group.id,\n            group.creator,\n            group.name,\n            group.description,\n            group.status,\n            group.contributionAmount,\n            group.contributionTimeline,\n            group.savingsRatio,\n            group.selectedGrantee\n        );\n    }\n\n    /**\n     * @dev Retrieves the IDs of groups a contributor belongs to.\n     * @param contributor The address of the contributor.\n     * @return An array of group IDs the contributor belongs to.\n     */\n    function getGroupsByContributor(address contributor) public view returns (uint[] memory) {\n        return contributorGroups[contributor];\n    }\n\n    /**\n     * @dev Fallback function that reverts any Ether sent to the contract.\n     */\n    fallback() external payable {\n        revert(\"Fallback function triggered, no Ether accepted\");\n    }\n\n    /**\n     * @dev Receive function that reverts any direct Ether payments.\n     */\n    receive() external payable {\n        revert(\"Contract does not accept direct Ether payments\");\n    }\n}\n"
    },
    "contracts/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @title MiwaMeter\n * @dev A basic ERC20 token called MiwaMeter.\n */\ncontract MiwaMeter is ERC20 {\n    constructor(uint256 initialSupply) ERC20(\"MiwaMeter\", \"MM\") {\n        _mint(msg.sender, initialSupply);\n    }\n}\n\n/**\n * @title ChainChamaCharge\n * @dev A basic ERC20 token called ChainChamaCharge.\n */\ncontract ChainChamaCharge is ERC20 {\n    constructor(uint256 initialSupply) ERC20(\"ChainChamaCharge\", \"CCC\") {\n        _mint(msg.sender, initialSupply);\n    }\n}\n"
    },
    "contracts/YourContract.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n// Useful for debugging. Remove when deploying to a live network.\nimport \"hardhat/console.sol\";\n\n// Use openzeppelin to inherit battle-tested implementations (ERC20, ERC721, etc)\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * A smart contract that allows changing a state variable of the contract and tracking the changes\n * It also allows the owner to withdraw the Ether in the contract\n * @author BuidlGuidl\n */\ncontract YourContract {\n\t// State Variables\n\taddress public immutable owner;\n\tstring public greeting = \"Building Unstoppable Apps!!!\";\n\tbool public premium = false;\n\tuint256 public totalCounter = 0;\n\tmapping(address => uint) public userGreetingCounter;\n\n\t// Events: a way to emit log statements from smart contract that can be listened to by external parties\n\tevent GreetingChange(\n\t\taddress indexed greetingSetter,\n\t\tstring newGreeting,\n\t\tbool premium,\n\t\tuint256 value\n\t);\n\n\t// Constructor: Called once on contract deployment\n\t// Check packages/hardhat/deploy/00_deploy_your_contract.ts\n\tconstructor(address _owner) {\n\t\towner = _owner;\n\t}\n\n\t// Modifier: used to define a set of rules that must be met before or after a function is executed\n\t// Check the withdraw() function\n\tmodifier isOwner() {\n\t\t// msg.sender: predefined variable that represents address of the account that called the current function\n\t\trequire(msg.sender == owner, \"Not the Owner\");\n\t\t_;\n\t}\n\n\t/**\n\t * Function that allows anyone to change the state variable \"greeting\" of the contract and increase the counters\n\t *\n\t * @param _newGreeting (string memory) - new greeting to save on the contract\n\t */\n\tfunction setGreeting(string memory _newGreeting) public payable {\n\t\t// Print data to the hardhat chain console. Remove when deploying to a live network.\n\t\tconsole.log(\n\t\t\t\"Setting new greeting '%s' from %s\",\n\t\t\t_newGreeting,\n\t\t\tmsg.sender\n\t\t);\n\n\t\t// Change state variables\n\t\tgreeting = _newGreeting;\n\t\ttotalCounter += 1;\n\t\tuserGreetingCounter[msg.sender] += 1;\n\n\t\t// msg.value: built-in global variable that represents the amount of ether sent with the transaction\n\t\tif (msg.value > 0) {\n\t\t\tpremium = true;\n\t\t} else {\n\t\t\tpremium = false;\n\t\t}\n\n\t\t// emit: keyword used to trigger an event\n\t\temit GreetingChange(msg.sender, _newGreeting, msg.value > 0, msg.value);\n\t}\n\n\t/**\n\t * Function that allows the owner to withdraw all the Ether in the contract\n\t * The function can only be called by the owner of the contract as defined by the isOwner modifier\n\t */\n\tfunction withdraw() public isOwner {\n\t\t(bool success, ) = owner.call{ value: address(this).balance }(\"\");\n\t\trequire(success, \"Failed to send Ether\");\n\t}\n\n\t/**\n\t * Function that allows the contract to receive ETH\n\t */\n\treceive() external payable {}\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}