{
  "address": "0x86A21436887050432159153E00d8bA8674aD6576",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "ContributionMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "grantee",
          "type": "address"
        }
      ],
      "name": "GranteeSelected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "groupCreator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ChamaGroupV5.STATUS",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "GroupArchived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "groupCreator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum ChamaGroupV5.STATUS",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "GroupCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contributionAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contributionTimeline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "savingsRatio",
          "type": "uint256"
        }
      ],
      "name": "GroupUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberAddedByOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numberOfMembers",
          "type": "uint256"
        }
      ],
      "name": "MembersAddedByOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "TokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "TokensRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "addAllowedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        }
      ],
      "name": "archiveGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "contribute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_contributionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_contributionTimelineInSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_savingsRatio",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_allowedTokens",
          "type": "address[]"
        }
      ],
      "name": "createGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        }
      ],
      "name": "getGroupById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "enum ChamaGroupV5.STATUS",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "contributionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contributionTimeline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "savingsRatio",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "selectedGrantee",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        }
      ],
      "name": "getGroupsByContributor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBatchSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "removeAllowedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "removeMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_contributionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_contributionTimelineInSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_savingsRatio",
          "type": "uint256"
        }
      ],
      "name": "updateGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf346a31fd806a01e4a13d2ee50eaad34f4e96df3523d23f4ae078a6253e54d26",
  "receipt": {
    "to": null,
    "from": "0x54Bc458B429AFD4D66670fD55c8922CBceCF57ce",
    "contractAddress": "0x86A21436887050432159153E00d8bA8674aD6576",
    "transactionIndex": 6,
    "gasUsed": "2464798",
    "logsBloom": "0x
    "blockHash": "0x906ebc47ad38b61bbe6bdac19074daae74537475e5a535bcc5f617bc62fe2617",
    "transactionHash": "0xf346a31fd806a01e4a13d2ee50eaad34f4e96df3523d23f4ae078a6253e54d26",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 13811615,
        "transactionHash": "0xf346a31fd806a01e4a13d2ee50eaad34f4e96df3523d23f4ae078a6253e54d26",
        "address": "0x86A21436887050432159153E00d8bA8674aD6576",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000054bc458b429afd4d66670fd55c8922cbcecf57ce"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x906ebc47ad38b61bbe6bdac19074daae74537475e5a535bcc5f617bc62fe2617"
      }
    ],
    "blockNumber": 13811615,
    "cumulativeGasUsed": "5288812",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "79e021bee9f52b14a3883b83a333f1ac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"ContributionMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"grantee\",\"type\":\"address\"}],\"name\":\"GranteeSelected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"groupCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ChamaGroupV5.STATUS\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"GroupArchived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"groupCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum ChamaGroupV5.STATUS\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"GroupCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contributionTimeline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"savingsRatio\",\"type\":\"uint256\"}],\"name\":\"GroupUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberAddedByOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfMembers\",\"type\":\"uint256\"}],\"name\":\"MembersAddedByOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"TokensRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"addAllowedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"}],\"name\":\"archiveGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contributionTimelineInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_savingsRatio\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_allowedTokens\",\"type\":\"address[]\"}],\"name\":\"createGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"}],\"name\":\"getGroupById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum ChamaGroupV5.STATUS\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionTimeline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"savingsRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"selectedGrantee\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"getGroupsByContributor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"removeAllowedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contributionTimelineInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_savingsRatio\",\"type\":\"uint256\"}],\"name\":\"updateGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"A smart contract for managing savings groups (Chamas) where members can contribute Ether or ERC20 tokens. The contract includes functionalities for group creation, contributions, grantee selection, withdrawals, and group archiving.\",\"kind\":\"dev\",\"methods\":{\"addAllowedToken(uint256,address)\":{\"details\":\"Adds a new token to the allowed tokens list for a group.\",\"params\":{\"groupId\":\"The ID of the group.\",\"tokenAddress\":\"The address of the ERC20 token to add.\"}},\"archiveGroup(uint256)\":{\"details\":\"Archives a group and marks it as inactive.\",\"params\":{\"groupId\":\"The ID of the group.\"}},\"contribute(uint256,address,uint256)\":{\"details\":\"Allows an approved member to contribute Ether or ERC20 tokens to the specified group.\",\"params\":{\"groupId\":\"The ID of the group.\",\"tokenAddress\":\"The address of the ERC20 token (use 0x0000000000000000000000000000000000000000 for Ether).\",\"tokenAmount\":\"The amount of ERC20 tokens to contribute, in the token's smallest unit.\"}},\"createGroup(string,string,uint256,uint256,uint256,address[])\":{\"details\":\"Creates a new savings group with the specified parameters.\",\"params\":{\"_allowedTokens\":\"An array of allowed ERC20 token addresses for contributions.\",\"_contributionAmount\":\"The fixed contribution amount for all members, denoted in the smallest unit (e.g., wei for Ether, or token decimals for ERC20).\",\"_contributionTimelineInSeconds\":\"The timeline for contributions, in seconds.\",\"_description\":\"The description of the group.\",\"_name\":\"The name of the group.\",\"_savingsRatio\":\"The percentage out of 10000 for the savings split.\"}},\"getGroupById(uint256)\":{\"details\":\"Retrieves the details of a group by its ID.\",\"params\":{\"groupId\":\"The ID of the group.\"},\"returns\":{\"contributionAmount\":\"The fixed contribution amount for the group.\",\"contributionTimeline\":\"The contribution timeline for the group.\",\"creator\":\"The creator of the group.\",\"description\":\"The description of the group.\",\"id\":\"The ID of the group.\",\"name\":\"The name of the group.\",\"savingsRatio\":\"The savings ratio percentage for the group.\",\"selectedGrantee\":\"The currently selected grantee.\",\"status\":\"The current status of the group.\"}},\"getGroupsByContributor(address)\":{\"details\":\"Retrieves the IDs of groups a contributor belongs to.\",\"params\":{\"contributor\":\"The address of the contributor.\"},\"returns\":{\"_0\":\"An array of group IDs the contributor belongs to.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeAllowedTokens(uint256,address[])\":{\"details\":\"Removes multiple tokens from the allowed tokens list for a group.\",\"params\":{\"groupId\":\"The ID of the group.\",\"tokenAddresses\":\"The array of ERC20 token addresses to remove.\"}},\"removeMember(uint256,address)\":{\"details\":\"Removes a member from the group, but allows them to withdraw their contributions if they meet conditions.\",\"params\":{\"groupId\":\"The ID of the group.\",\"member\":\"The address of the member to remove.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateGroup(uint256,string,uint256,uint256,uint256)\":{\"details\":\"Updates group settings if members agree.\",\"params\":{\"_contributionAmount\":\"The new contribution amount for the group.\",\"_contributionTimelineInSeconds\":\"The new contribution timeline for the group, in seconds.\",\"_description\":\"The new description of the group.\",\"_savingsRatio\":\"The new savings ratio for the group.\",\"groupId\":\"The ID of the group.\"}},\"withdraw(uint256,address)\":{\"details\":\"Withdraws Ether or ERC20 tokens for the selected grantee or a contributor claiming their owed balance. Only the grantee can withdraw the allocated amount for the current period. Contributors can withdraw their owed balances after the saving period or if the group is archived.\",\"params\":{\"groupId\":\"The ID of the group.\",\"tokenAddress\":\"The address of the ERC20 token (use 0x0000000000000000000000000000000000000000 for Ether).\"}}},\"title\":\"ChamaGroupV5\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ChamaGroup5.sol\":\"ChamaGroupV5\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/ChamaGroup5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title ChamaGroupV5\\n * @dev A smart contract for managing savings groups (Chamas) where members can contribute Ether or ERC20 tokens.\\n * The contract includes functionalities for group creation, contributions, grantee selection, withdrawals, and group archiving.\\n */\\ncontract ChamaGroupV5 is ReentrancyGuard, Ownable {\\n    using Counters for Counters.Counter;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    Counters.Counter public nextId;\\n    uint constant MIN_GRANTEE_MEMBERSHIP_DURATION = 90 days; // Minimum time requirement before becoming a selected grantee\\n    uint constant MIN_CONTRIBUTION_TIMELINE = 1 hours; // Minimum contribution timeline is 1 hour\\n\\n    enum STATUS {\\n        ACTIVE,\\n        ARCHIVED\\n    }\\n\\n    struct Group {\\n        uint id;\\n        address creator;\\n        string name;\\n        string description;\\n        STATUS status;\\n        uint contributionAmount;\\n        uint contributionTimeline;\\n        uint savingsRatio; // Percentage out of 10000 (e.g., 5000 represents 50%)\\n        uint lastContributionTime;\\n        address[] contributors;\\n        mapping(address => uint256) etherContributions;\\n        mapping(address => mapping(address => uint256)) tokenContributions;\\n        mapping(address => bool) approvedMembers;\\n        mapping(address => uint256) votingPower;\\n        mapping(address => uint256) joinTime; // Timestamp when a member joined the group\\n        mapping(address => uint256) etherOwed; // Tracks Ether owed to each contributor\\n        address selectedGrantee;\\n        address[] allowedTokens;\\n        uint totalContributions;\\n        bool granteeApproved; // Tracks if the grantee is approved to withdraw\\n        bool hasWithdrawn; // Tracks if the grantee has withdrawn in the current period\\n    }\\n\\n    mapping(uint => Group) private groups;\\n    mapping(address => uint[]) private contributorGroups;\\n    uint256 public maxBatchSize = 100;\\n\\n    event GroupCreated(uint indexed groupId, address groupCreator, string name, string description, STATUS status);\\n    event ContributionMade(uint indexed groupId, address indexed contributor, uint amount, address tokenAddress);\\n    event MemberApproved(uint indexed groupId, address indexed member);\\n    event GranteeSelected(uint indexed groupId, address indexed grantee);\\n    event GroupArchived(uint indexed groupId, address groupCreator, STATUS status);\\n    event Withdrawal(address indexed contributor, uint amount, address tokenAddress);\\n    event MemberAddedByOwner(uint indexed groupId, address indexed member);\\n    event MembersAddedByOwner(uint indexed groupId, uint numberOfMembers);\\n    event MemberRevoked(uint indexed groupId, address indexed member);\\n    event MemberRemoved(uint indexed groupId, address indexed member);\\n    event GroupUpdated(uint indexed groupId, string description, uint contributionAmount, uint contributionTimeline, uint savingsRatio);\\n    event TokenAdded(uint indexed groupId, address indexed tokenAddress);\\n    event TokensRemoved(uint indexed groupId, address[] tokenAddresses);\\n\\n    constructor() {\\n        nextId.increment(); // Start IDs from 1\\n    }\\n\\n    modifier groupExists(uint groupId) {\\n        require(groups[groupId].id != 0, \\\"Group does not exist\\\");\\n        _;\\n    }\\n\\n    modifier onlyGroupCreator(uint groupId) {\\n        require(msg.sender == groups[groupId].creator, \\\"Only the group creator can perform this action\\\");\\n        _;\\n    }\\n\\n    modifier onlyApprovedMember(uint groupId) {\\n        require(groups[groupId].approvedMembers[msg.sender], \\\"You are not an approved member\\\");\\n        _;\\n    }\\n\\n    modifier onlySelectedGrantee(uint groupId) {\\n        require(msg.sender == groups[groupId].selectedGrantee, \\\"You are not the selected grantee\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Creates a new savings group with the specified parameters.\\n     * @param _name The name of the group.\\n     * @param _description The description of the group.\\n     * @param _contributionAmount The fixed contribution amount for all members, denoted in the smallest unit (e.g., wei for Ether, or token decimals for ERC20).\\n     * @param _contributionTimelineInSeconds The timeline for contributions, in seconds.\\n     * @param _savingsRatio The percentage out of 10000 for the savings split.\\n     * @param _allowedTokens An array of allowed ERC20 token addresses for contributions.\\n     */\\n    function createGroup(\\n        string memory _name,\\n        string memory _description,\\n        uint _contributionAmount,\\n        uint _contributionTimelineInSeconds,\\n        uint _savingsRatio,\\n        address[] memory _allowedTokens\\n    ) public nonReentrant {\\n        require(bytes(_name).length > 0, \\\"Name must not be empty\\\");\\n        require(bytes(_description).length > 0, \\\"Description must not be empty\\\");\\n        require(_contributionAmount > 0, \\\"Contribution amount must be greater than zero\\\");\\n        require(_contributionTimelineInSeconds >= MIN_CONTRIBUTION_TIMELINE, \\\"Contribution timeline must be at least 1 hour\\\");\\n        require(_savingsRatio <= 10000, \\\"Savings ratio must be a percentage (0-10000)\\\");\\n\\n        Group storage newGroup = groups[nextId.current()];\\n        newGroup.id = nextId.current();\\n        newGroup.creator = msg.sender;\\n        newGroup.name = _name;\\n        newGroup.description = _description;\\n        newGroup.status = STATUS.ACTIVE;\\n        newGroup.contributionAmount = _contributionAmount;\\n        newGroup.contributionTimeline = _contributionTimelineInSeconds;\\n        newGroup.savingsRatio = _savingsRatio;\\n        newGroup.contributors.push(msg.sender);\\n        newGroup.approvedMembers[msg.sender] = true;\\n        newGroup.joinTime[msg.sender] = block.timestamp; // Record the time the member joined\\n        newGroup.allowedTokens = _allowedTokens;\\n\\n        contributorGroups[msg.sender].push(nextId.current());\\n\\n        emit GroupCreated(nextId.current(), msg.sender, _name, _description, STATUS.ACTIVE);\\n\\n        nextId.increment();\\n    }\\n\\n    /**\\n     * @dev Archives a group and marks it as inactive.\\n     * @param groupId The ID of the group.\\n     */\\n    function archiveGroup(uint groupId) public nonReentrant groupExists(groupId) onlyGroupCreator(groupId) {\\n        Group storage group = groups[groupId];\\n        require(group.status == STATUS.ACTIVE, \\\"Group is not active\\\");\\n\\n        group.status = STATUS.ARCHIVED;\\n\\n        emit GroupArchived(groupId, msg.sender, STATUS.ARCHIVED);\\n    }\\n\\n    /**\\n     * @dev Updates group settings if members agree.\\n     * @param groupId The ID of the group.\\n     * @param _description The new description of the group.\\n     * @param _contributionAmount The new contribution amount for the group.\\n     * @param _contributionTimelineInSeconds The new contribution timeline for the group, in seconds.\\n     * @param _savingsRatio The new savings ratio for the group.\\n     */\\n    function updateGroup(\\n        uint groupId,\\n        string memory _description,\\n        uint _contributionAmount,\\n        uint _contributionTimelineInSeconds,\\n        uint _savingsRatio\\n    ) public nonReentrant groupExists(groupId) onlyGroupCreator(groupId) {\\n        require(bytes(_description).length > 0, \\\"Description must not be empty\\\");\\n        require(_contributionAmount > 0, \\\"Contribution amount must be greater than zero\\\");\\n        require(_contributionTimelineInSeconds >= MIN_CONTRIBUTION_TIMELINE, \\\"Contribution timeline must be at least 1 hour\\\");\\n        require(_savingsRatio <= 10000, \\\"Savings ratio must be a percentage (0-10000)\\\");\\n\\n        Group storage group = groups[groupId];\\n        group.description = _description;\\n        group.contributionAmount = _contributionAmount;\\n        group.contributionTimeline = _contributionTimelineInSeconds;\\n        group.savingsRatio = _savingsRatio;\\n\\n        emit GroupUpdated(groupId, _description, _contributionAmount, _contributionTimelineInSeconds, _savingsRatio);\\n    }\\n\\n    /**\\n     * @dev Adds a new token to the allowed tokens list for a group.\\n     * @param groupId The ID of the group.\\n     * @param tokenAddress The address of the ERC20 token to add.\\n     */\\n    function addAllowedToken(uint groupId, address tokenAddress) public nonReentrant groupExists(groupId) onlyGroupCreator(groupId) {\\n        Group storage group = groups[groupId];\\n        require(!isAllowedToken(group, tokenAddress), \\\"Token is already allowed\\\");\\n\\n        group.allowedTokens.push(tokenAddress);\\n        emit TokenAdded(groupId, tokenAddress);\\n    }\\n\\n    /**\\n     * @dev Removes multiple tokens from the allowed tokens list for a group.\\n     * @param groupId The ID of the group.\\n     * @param tokenAddresses The array of ERC20 token addresses to remove.\\n     */\\n    function removeAllowedTokens(uint groupId, address[] memory tokenAddresses) public nonReentrant groupExists(groupId) onlyGroupCreator(groupId) {\\n        Group storage group = groups[groupId];\\n        for (uint i = 0; i < tokenAddresses.length; i++) {\\n            address tokenAddress = tokenAddresses[i];\\n            uint tokenIndex = findTokenIndex(group, tokenAddress);\\n            if (tokenIndex < group.allowedTokens.length) {\\n                group.allowedTokens[tokenIndex] = group.allowedTokens[group.allowedTokens.length - 1];\\n                group.allowedTokens.pop();\\n            }\\n        }\\n        emit TokensRemoved(groupId, tokenAddresses);\\n    }\\n\\n    /**\\n     * @dev Allows an approved member to contribute Ether or ERC20 tokens to the specified group.\\n     * @param groupId The ID of the group.\\n     * @param tokenAddress The address of the ERC20 token (use 0x0000000000000000000000000000000000000000 for Ether).\\n     * @param tokenAmount The amount of ERC20 tokens to contribute, in the token's smallest unit.\\n     */\\n    function contribute(uint groupId, address tokenAddress, uint tokenAmount) public payable nonReentrant groupExists(groupId) onlyApprovedMember(groupId) {\\n        Group storage group = groups[groupId];\\n        require(group.status == STATUS.ACTIVE, \\\"Group is not active\\\");\\n        require(block.timestamp >= group.lastContributionTime + group.contributionTimeline, \\\"Contribution timeline not met\\\");\\n        require(block.timestamp < group.lastContributionTime + group.contributionTimeline + 1 days, \\\"Contribution period has ended\\\");\\n\\n        bool isEther = tokenAddress == address(0);\\n        uint256 valueToGrantee = (group.savingsRatio * group.contributionAmount) / 10000;\\n        uint256 valueToSave = group.contributionAmount - valueToGrantee;\\n\\n        if (isEther) {\\n            require(msg.value == group.contributionAmount, \\\"Incorrect Ether contribution amount\\\");\\n\\n            // Track the contributor's Ether owed\\n            group.etherOwed[msg.sender] += valueToSave;\\n\\n            // Track the selected grantee's Ether owed\\n            group.etherOwed[group.selectedGrantee] += valueToGrantee;\\n\\n        } else {\\n            require(tokenAmount == group.contributionAmount, \\\"Incorrect token contribution amount\\\");\\n            require(isAllowedToken(group, tokenAddress), \\\"Token not allowed for this group\\\");\\n\\n            IERC20(tokenAddress).safeTransferFrom(msg.sender, address(this), tokenAmount);\\n\\n            // Track the contributor's token owed\\n            group.tokenContributions[msg.sender][tokenAddress] += valueToSave;\\n\\n            // Track the selected grantee's token owed\\n            group.tokenContributions[group.selectedGrantee][tokenAddress] += valueToGrantee;\\n        }\\n\\n        group.totalContributions += group.contributionAmount;\\n        group.lastContributionTime = block.timestamp;\\n        group.granteeApproved = true; // Approve the grantee for withdrawal\\n        group.hasWithdrawn = false; // Reset the withdrawal flag for the new period\\n\\n        if (!isContributor(group, msg.sender)) {\\n            group.contributors.push(msg.sender);\\n            contributorGroups[msg.sender].push(groupId);\\n            group.joinTime[msg.sender] = block.timestamp; // Record the join time\\n        }\\n\\n        group.votingPower[msg.sender] += valueToGrantee;\\n\\n        emit ContributionMade(groupId, msg.sender, isEther ? msg.value : tokenAmount, tokenAddress);\\n\\n        // Automatically select the next grantee after each contribution\\n        selectGranteeByVoting(groupId);\\n    }\\n\\n    /**\\n     * @dev Withdraws Ether or ERC20 tokens for the selected grantee or a contributor claiming their owed balance.\\n     * Only the grantee can withdraw the allocated amount for the current period.\\n     * Contributors can withdraw their owed balances after the saving period or if the group is archived.\\n     * @param groupId The ID of the group.\\n     * @param tokenAddress The address of the ERC20 token (use 0x0000000000000000000000000000000000000000 for Ether).\\n     */\\n    function withdraw(uint groupId, address tokenAddress) public nonReentrant groupExists(groupId) {\\n        Group storage group = groups[groupId];\\n        require(group.status == STATUS.ACTIVE || group.status == STATUS.ARCHIVED, \\\"Group is not active or archived\\\");\\n\\n        bool isEther = tokenAddress == address(0);\\n        uint256 amount;\\n\\n        if (isEther) {\\n            amount = group.etherOwed[msg.sender];\\n            require(amount > 0, \\\"No Ether to withdraw\\\");\\n            group.etherOwed[msg.sender] = 0; // Set balance to zero before transfer to prevent reentrancy\\n\\n            payable(msg.sender).sendValue(amount);\\n        } else {\\n            amount = group.tokenContributions[msg.sender][tokenAddress];\\n            require(amount > 0, \\\"No tokens to withdraw\\\");\\n            group.tokenContributions[msg.sender][tokenAddress] = 0; // Set balance to zero before transfer to prevent reentrancy\\n\\n            IERC20(tokenAddress).safeTransfer(msg.sender, amount);\\n        }\\n\\n        emit Withdrawal(msg.sender, amount, tokenAddress);\\n    }\\n\\n    /**\\n     * @dev Removes a member from the group, but allows them to withdraw their contributions if they meet conditions.\\n     * @param groupId The ID of the group.\\n     * @param member The address of the member to remove.\\n     */\\n    function removeMember(uint groupId, address member) public nonReentrant groupExists(groupId) onlyGroupCreator(groupId) {\\n        Group storage group = groups[groupId];\\n        require(group.approvedMembers[member], \\\"Member not approved\\\");\\n        require(group.status == STATUS.ACTIVE || group.status == STATUS.ARCHIVED, \\\"Group is not active or archived\\\");\\n\\n        group.approvedMembers[member] = false;\\n        emit MemberRemoved(groupId, member);\\n    }\\n\\n    /**\\n     * @dev Simplified and fairer selection of the next grantee using a minimum membership duration.\\n     * @param groupId The ID of the group.\\n     */\\n    function selectGranteeByVoting(uint groupId) internal groupExists(groupId) {\\n        Group storage group = groups[groupId];\\n        uint256 highestVotes = 0;\\n        address newGrantee;\\n\\n        for (uint i = 0; i < group.contributors.length; i++) {\\n            address contributor = group.contributors[i];\\n            if (group.approvedMembers[contributor] && group.votingPower[contributor] > highestVotes && block.timestamp >= group.joinTime[contributor] + MIN_GRANTEE_MEMBERSHIP_DURATION) {\\n                highestVotes = group.votingPower[contributor];\\n                newGrantee = contributor;\\n            }\\n        }\\n\\n        group.selectedGrantee = newGrantee;\\n\\n        emit GranteeSelected(groupId, group.selectedGrantee);\\n    }\\n\\n    /**\\n     * @dev Internal function to approve a new member to join the specified group.\\n     * @param groupId The ID of the group.\\n     * @param newMember The address of the new member.\\n     */\\n    function _approveMemberInternal(uint groupId, address newMember) internal {\\n        Group storage group = groups[groupId];\\n        group.approvedMembers[newMember] = true;\\n        group.joinTime[newMember] = block.timestamp; // Record the time the member joined\\n\\n        emit MemberApproved(groupId, newMember);\\n    }\\n\\n    /**\\n     * @dev Checks if a token is allowed for a group.\\n     * @param group The group to check.\\n     * @param tokenAddress The address of the token to check.\\n     * @return True if the token is allowed, false otherwise.\\n     */\\n    function isAllowedToken(Group storage group, address tokenAddress) internal view returns (bool) {\\n        for (uint i = 0; i < group.allowedTokens.length; i++) {\\n            if (group.allowedTokens[i] == tokenAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Finds the index of a token in the allowedTokens array.\\n     * @param group The group to search.\\n     * @param tokenAddress The address of the token to find.\\n     * @return The index of the token in the array.\\n     */\\n    function findTokenIndex(Group storage group, address tokenAddress) internal view returns (uint) {\\n        for (uint i = 0; i < group.allowedTokens.length; i++) {\\n            if (group.allowedTokens[i] == tokenAddress) {\\n                return i;\\n            }\\n        }\\n        return group.allowedTokens.length;\\n    }\\n\\n    /**\\n     * @dev Checks if an address is a contributor in the group.\\n     * @param group The group to check.\\n     * @param contributor The address to check.\\n     * @return True if the address is a contributor, false otherwise.\\n     */\\n    function isContributor(Group storage group, address contributor) internal view returns (bool) {\\n        for (uint i = 0; i < group.contributors.length; i++) {\\n            if (group.contributors[i] == contributor) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Retrieves the details of a group by its ID.\\n     * @param groupId The ID of the group.\\n     * @return id The ID of the group.\\n     * @return creator The creator of the group.\\n     * @return name The name of the group.\\n     * @return description The description of the group.\\n     * @return status The current status of the group.\\n     * @return contributionAmount The fixed contribution amount for the group.\\n     * @return contributionTimeline The contribution timeline for the group.\\n     * @return savingsRatio The savings ratio percentage for the group.\\n     * @return selectedGrantee The currently selected grantee.\\n     */\\n    function getGroupById(uint groupId) public view groupExists(groupId) returns (\\n        uint id,\\n        address creator,\\n        string memory name,\\n        string memory description,\\n        STATUS status,\\n        uint contributionAmount,\\n        uint contributionTimeline,\\n        uint savingsRatio,\\n        address selectedGrantee\\n    ) {\\n        Group storage group = groups[groupId];\\n\\n        return (\\n            group.id,\\n            group.creator,\\n            group.name,\\n            group.description,\\n            group.status,\\n            group.contributionAmount,\\n            group.contributionTimeline,\\n            group.savingsRatio,\\n            group.selectedGrantee\\n        );\\n    }\\n\\n    /**\\n     * @dev Retrieves the IDs of groups a contributor belongs to.\\n     * @param contributor The address of the contributor.\\n     * @return An array of group IDs the contributor belongs to.\\n     */\\n    function getGroupsByContributor(address contributor) public view returns (uint[] memory) {\\n        return contributorGroups[contributor];\\n    }\\n\\n    /**\\n     * @dev Fallback function that reverts any Ether sent to the contract.\\n     */\\n    fallback() external payable {\\n        revert(\\\"Fallback function triggered, no Ether accepted\\\");\\n    }\\n\\n    /**\\n     * @dev Receive function that reverts any direct Ether payments.\\n     */\\n    receive() external payable {\\n        revert(\\\"Contract does not accept direct Ether payments\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9b131b5072f4d6b076f9caf87143bfaf66ae2689b2d4b0bc4401a1022a5ba8fd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260646005553480156200001657600080fd5b506001600055620000273362000044565b6200003e60026200009660201b6200184e1760201c565b6200009f565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80546001019055565b6129f180620000af6000396000f3fe6080604052600436106100eb5760003560e01c80636cc29ea01161008a578063a4b1aa7911610059578063a4b1aa791461031a578063b56bb68d1461033a578063bd01c9a71461035a578063f2fde38b1461038757610154565b80636cc29ea014610295578063715018a6146102ca5780638952ac1e146102df5780638da5cb5b146102f257610154565b80632913daa0116100c65780632913daa01461021557806361b8ce8c1461023e57806363eb7b4d146102555780636be7658b1461027557610154565b8062f714ce146101b357806309c9af3f146101d55780632731e949146101f557610154565b366101545760405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420646f6573206e6f7420616363657074206469726563742060448201526d4574686572207061796d656e747360901b60648201526084015b60405180910390fd5b60405162461bcd60e51b815260206004820152602e60248201527f46616c6c6261636b2066756e6374696f6e207472696767657265642c206e6f2060448201526d115d1a195c881858d8d95c1d195960921b606482015260840161014b565b3480156101bf57600080fd5b506101d36101ce3660046120cc565b6103a7565b005b3480156101e157600080fd5b506101d36101f03660046120cc565b6105f3565b34801561020157600080fd5b506101d36102103660046121c6565b610733565b34801561022157600080fd5b5061022b60055481565b6040519081526020015b60405180910390f35b34801561024a57600080fd5b5060025461022b9081565b34801561026157600080fd5b506101d361027036600461227d565b610905565b34801561028157600080fd5b506101d36102903660046120cc565b610b7c565b3480156102a157600080fd5b506102b56102b0366004612321565b610d3b565b604051610235999897969594939291906123c2565b3480156102d657600080fd5b506101d3610f10565b6101d36102ed36600461243c565b610f24565b3480156102fe57600080fd5b506001546040516001600160a01b039091168152602001610235565b34801561032657600080fd5b506101d3610335366004612321565b611486565b34801561034657600080fd5b506101d3610355366004612471565b6115be565b34801561036657600080fd5b5061037a6103753660046124d3565b61176c565b60405161023591906124ee565b34801561039357600080fd5b506101d36103a23660046124d3565b6117d8565b6103af611857565b6000828152600360205260408120548391036103dd5760405162461bcd60e51b815260040161014b90612532565b600083815260036020526040812090600482015460ff1660018111156104055761040561238a565b148061042957506001600482015460ff1660018111156104275761042761238a565b145b6104755760405162461bcd60e51b815260206004820152601f60248201527f47726f7570206973206e6f7420616374697665206f7220617263686976656400604482015260640161014b565b6001600160a01b03831615600081156105005750336000908152600f83016020526040902054806104df5760405162461bcd60e51b81526020600482015260146024820152734e6f20457468657220746f20776974686472617760601b604482015260640161014b565b336000818152600f850160205260408120556104fb90826118b0565b61059f565b50336000908152600b8301602090815260408083206001600160a01b03881684529091529020548061056c5760405162461bcd60e51b81526020600482015260156024820152744e6f20746f6b656e7320746f20776974686472617760581b604482015260640161014b565b336000818152600b8501602090815260408083206001600160a01b038a16808552925282209190915561059f91836119c9565b604080518281526001600160a01b038716602082015233917e1a143d5b175701cb3246058ffac3d63945192075a926ff73a19930f09d587a910160405180910390a2505050506105ef6001600055565b5050565b6105fb611857565b6000828152600360205260408120548391036106295760405162461bcd60e51b815260040161014b90612532565b60008381526003602052604090206001015483906001600160a01b031633146106645760405162461bcd60e51b815260040161014b90612560565b600084815260036020526040902061067c8185611a2c565b156106c95760405162461bcd60e51b815260206004820152601860248201527f546f6b656e20697320616c726561647920616c6c6f7765640000000000000000604482015260640161014b565b6011810180546001810182556000918252602082200180546001600160a01b0319166001600160a01b038716908117909155604051909187917fca37a60f79854243dcab36b6ad6fcaafc7ae13448087ee70547943babc7dccf09190a35050506105ef6001600055565b61073b611857565b6000828152600360205260408120548391036107695760405162461bcd60e51b815260040161014b90612532565b60008381526003602052604090206001015483906001600160a01b031633146107a45760405162461bcd60e51b815260040161014b90612560565b6000848152600360205260408120905b84518110156108bf5760008582815181106107d1576107d16125ae565b6020026020010151905060006107e78483611a9d565b60118501549091508110156108aa57601184018054610808906001906125da565b81548110610818576108186125ae565b6000918252602090912001546011850180546001600160a01b039092169183908110610846576108466125ae565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555083601101805480610887576108876125ed565b600082815260209020810160001990810180546001600160a01b03191690550190555b505080806108b790612603565b9150506107b4565b50847f111b06d202096e6e7daf638fedcad7ee5eb78648092da57570b4a42bedf3d568856040516108f0919061261c565b60405180910390a25050506105ef6001600055565b61090d611857565b60008651116109575760405162461bcd60e51b81526020600482015260166024820152754e616d65206d757374206e6f7420626520656d70747960501b604482015260640161014b565b60008551116109a85760405162461bcd60e51b815260206004820152601d60248201527f4465736372697074696f6e206d757374206e6f7420626520656d707479000000604482015260640161014b565b600084116109c85760405162461bcd60e51b815260040161014b9061265d565b610e108310156109ea5760405162461bcd60e51b815260040161014b906126aa565b612710821115610a0c5760405162461bcd60e51b815260040161014b906126f7565b600060036000610a1b60025490565b81526020019081526020016000209050610a3460025490565b81556001810180546001600160a01b0319163317905560028101610a5888826127c3565b5060038101610a6787826127c3565b5060048101805460ff19908116909155600582018690556006820185905560078201849055600982018054600181810183556000928352602080842090920180546001600160a01b031916339081179091558352600c8501825260408084208054909516909117909355600e840181529190204290558251610af191601184019190850190612036565b50336000908152600460205260409020600254815460018101835560009283526020909220909101556002547f7f59872da60a4c019e3e167c8d5c5c0093bd0e199cfeca02250057a73b6a6d8a3389896000604051610b539493929190612883565b60405180910390a2610b69600280546001019055565b50610b746001600055565b505050505050565b610b84611857565b600082815260036020526040812054839103610bb25760405162461bcd60e51b815260040161014b90612532565b60008381526003602052604090206001015483906001600160a01b03163314610bed5760405162461bcd60e51b815260040161014b90612560565b60008481526003602090815260408083206001600160a01b0387168452600c81019092529091205460ff16610c5a5760405162461bcd60e51b815260206004820152601360248201527213595b58995c881b9bdd08185c1c1c9bdd9959606a1b604482015260640161014b565b6000600482015460ff166001811115610c7557610c7561238a565b1480610c9957506001600482015460ff166001811115610c9757610c9761238a565b145b610ce55760405162461bcd60e51b815260206004820152601f60248201527f47726f7570206973206e6f7420616374697665206f7220617263686976656400604482015260640161014b565b6001600160a01b0384166000818152600c83016020526040808220805460ff191690555187917f1c4c9d2e56d0635d11bc47c997c6909a0d7061f55cbb8f4b27386db37553191c91a35050506105ef6001600055565b6000806060806000806000806000896003600082815260200190815260200160002060000154600003610d805760405162461bcd60e51b815260040161014b90612532565b60008b81526003602081905260409091208054600182015460048301546005840154600685015460078601546010870154600288018054989997986001600160a01b03978816989197918b019660ff1695949392909116908790610de390612743565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0f90612743565b8015610e5c5780601f10610e3157610100808354040283529160200191610e5c565b820191906000526020600020905b815481529060010190602001808311610e3f57829003601f168201915b50505050509650858054610e6f90612743565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9b90612743565b8015610ee85780601f10610ebd57610100808354040283529160200191610ee8565b820191906000526020600020905b815481529060010190602001808311610ecb57829003601f168201915b505050505095509a509a509a509a509a509a509a509a509a5050509193959799909294969850565b610f18611b09565b610f226000611b63565b565b610f2c611857565b600083815260036020526040812054849103610f5a5760405162461bcd60e51b815260040161014b90612532565b6000848152600360209081526040808320338452600c01909152902054849060ff16610fc85760405162461bcd60e51b815260206004820152601e60248201527f596f7520617265206e6f7420616e20617070726f766564206d656d6265720000604482015260640161014b565b600085815260036020526040812090600482015460ff166001811115610ff057610ff061238a565b146110335760405162461bcd60e51b815260206004820152601360248201527247726f7570206973206e6f742061637469766560681b604482015260640161014b565b8060060154816008015461104791906128d2565b4210156110965760405162461bcd60e51b815260206004820152601d60248201527f436f6e747269627574696f6e2074696d656c696e65206e6f74206d6574000000604482015260640161014b565b806006015481600801546110aa91906128d2565b6110b790620151806128d2565b42106111055760405162461bcd60e51b815260206004820152601d60248201527f436f6e747269627574696f6e20706572696f642068617320656e646564000000604482015260640161014b565b600581015460078201546001600160a01b03871615916000916127109161112b916128e5565b61113591906128fc565b9050600081846005015461114991906125da565b9050821561120f57836005015434146111b05760405162461bcd60e51b815260206004820152602360248201527f496e636f727265637420457468657220636f6e747269627574696f6e20616d6f6044820152621d5b9d60ea1b606482015260840161014b565b336000908152600f85016020526040812080548392906111d19084906128d2565b909155505060108401546001600160a01b03166000908152600f85016020526040812080548492906112049084906128d2565b909155506113579050565b8360050154871461126e5760405162461bcd60e51b815260206004820152602360248201527f496e636f727265637420746f6b656e20636f6e747269627574696f6e20616d6f6044820152621d5b9d60ea1b606482015260840161014b565b6112788489611a2c565b6112c45760405162461bcd60e51b815260206004820181905260248201527f546f6b656e206e6f7420616c6c6f77656420666f7220746869732067726f7570604482015260640161014b565b6112d96001600160a01b03891633308a611bb5565b336000908152600b8501602090815260408083206001600160a01b038c1684529091528120805483929061130e9084906128d2565b909155505060108401546001600160a01b039081166000908152600b860160209081526040808320938c16835292905290812080548492906113519084906128d2565b90915550505b836005015484601201600082825461136f91906128d2565b909155505042600885015560138401805461ffff191660011790556113948433611bf3565b6113f257600984018054600181810183556000928352602080842090920180546001600160a01b031916339081179091558084526004835260408085208054938401815585528385209092018d90558352600e870190915290204290555b336000908152600d85016020526040812080548492906114139084906128d2565b90915550339050897f2fb3252c9a073e1e9018a7d2905521430380ba69dd563186c3e733e53a25379b856114475789611449565b345b604080519182526001600160a01b038d1660208301520160405180910390a361147189611c58565b5050505050506114816001600055565b505050565b61148e611857565b6000818152600360205260408120548291036114bc5760405162461bcd60e51b815260040161014b90612532565b60008281526003602052604090206001015482906001600160a01b031633146114f75760405162461bcd60e51b815260040161014b90612560565b600083815260036020526040812090600482015460ff16600181111561151f5761151f61238a565b146115625760405162461bcd60e51b815260206004820152601360248201527247726f7570206973206e6f742061637469766560681b604482015260640161014b565b60048101805460ff1916600190811790915560405185917fa77b40b842ddd14f93d5badff26d49b0ffe46f67a2bcb599cf42e74e12cabf78916115a691339161291e565b60405180910390a25050506115bb6001600055565b50565b6115c6611857565b6000858152600360205260408120548691036115f45760405162461bcd60e51b815260040161014b90612532565b60008681526003602052604090206001015486906001600160a01b0316331461162f5760405162461bcd60e51b815260040161014b90612560565b60008651116116805760405162461bcd60e51b815260206004820152601d60248201527f4465736372697074696f6e206d757374206e6f7420626520656d707479000000604482015260640161014b565b600085116116a05760405162461bcd60e51b815260040161014b9061265d565b610e108410156116c25760405162461bcd60e51b815260040161014b906126aa565b6127108311156116e45760405162461bcd60e51b815260040161014b906126f7565b600087815260036020819052604090912090810161170288826127c3565b5060058101869055600681018590556007810184905560405188907fdeafbf2f63aac7fbb359f5926ebace9d56638ad6f367ec5619fb586b1fa79ce990611750908a908a908a908a9061293b565b60405180910390a25050506117656001600055565b5050505050565b6001600160a01b0381166000908152600460209081526040918290208054835181840281018401909452808452606093928301828280156117cc57602002820191906000526020600020905b8154815260200190600101908083116117b8575b50505050509050919050565b6117e0611b09565b6001600160a01b0381166118455760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161014b565b6115bb81611b63565b80546001019055565b6002600054036118a95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161014b565b6002600055565b804710156119005760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161014b565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461194d576040519150601f19603f3d011682016040523d82523d6000602084013e611952565b606091505b50509050806114815760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161014b565b6040516001600160a01b03831660248201526044810182905261148190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611dcd565b6000805b6011840154811015611a9157826001600160a01b0316846011018281548110611a5b57611a5b6125ae565b6000918252602090912001546001600160a01b031603611a7f576001915050611a97565b80611a8981612603565b915050611a30565b50600090505b92915050565b6000805b6011840154811015611aff57826001600160a01b0316846011018281548110611acc57611acc6125ae565b6000918252602090912001546001600160a01b031603611aed579050611a97565b80611af781612603565b915050611aa1565b5050506011015490565b6001546001600160a01b03163314610f225760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161014b565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052611bed9085906323b872dd60e01b906084016119f5565b50505050565b6000805b6009840154811015611a9157826001600160a01b0316846009018281548110611c2257611c226125ae565b6000918252602090912001546001600160a01b031603611c46576001915050611a97565b80611c5081612603565b915050611bf7565b600081815260036020526040812054829103611c865760405162461bcd60e51b815260040161014b90612532565b60008281526003602052604081209080805b6009840154811015611d7a576000846009018281548110611cbb57611cbb6125ae565b60009182526020808320909101546001600160a01b0316808352600c880190915260409091205490915060ff168015611d0d57506001600160a01b0381166000908152600d8601602052604090205484105b8015611d4157506001600160a01b0381166000908152600e86016020526040902054611d3d906276a700906128d2565b4210155b15611d67576001600160a01b0381166000908152600d8601602052604090205493509150815b5080611d7281612603565b915050611c98565b506010830180546001600160a01b0319166001600160a01b03831690811790915560405186907f6d0d14e343bfa65dd86d4507c0b3afddc7477b6ceb74e4cb35f454ed02f8f5aa90600090a35050505050565b6000611e22826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611ea29092919063ffffffff16565b9050805160001480611e43575080806020019051810190611e43919061296a565b6114815760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161014b565b6060611eb18484600085611ebb565b90505b9392505050565b606082471015611f1c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161014b565b600080866001600160a01b03168587604051611f38919061298c565b60006040518083038185875af1925050503d8060008114611f75576040519150601f19603f3d011682016040523d82523d6000602084013e611f7a565b606091505b5091509150611f8b87838387611f98565b925050505b949350505050565b60608315612007578251600003612000576001600160a01b0385163b6120005760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161014b565b5081611f90565b611f90838381511561201c5781518083602001fd5b8060405162461bcd60e51b815260040161014b91906129a8565b82805482825590600052602060002090810192821561208b579160200282015b8281111561208b57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612056565b5061209792915061209b565b5090565b5b80821115612097576000815560010161209c565b80356001600160a01b03811681146120c757600080fd5b919050565b600080604083850312156120df57600080fd5b823591506120ef602084016120b0565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612137576121376120f8565b604052919050565b600082601f83011261215057600080fd5b8135602067ffffffffffffffff82111561216c5761216c6120f8565b8160051b61217b82820161210e565b928352848101820192828101908785111561219557600080fd5b83870192505b848310156121bb576121ac836120b0565b8252918301919083019061219b565b979650505050505050565b600080604083850312156121d957600080fd5b82359150602083013567ffffffffffffffff8111156121f757600080fd5b6122038582860161213f565b9150509250929050565b600082601f83011261221e57600080fd5b813567ffffffffffffffff811115612238576122386120f8565b61224b601f8201601f191660200161210e565b81815284602083860101111561226057600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c0878903121561229657600080fd5b863567ffffffffffffffff808211156122ae57600080fd5b6122ba8a838b0161220d565b975060208901359150808211156122d057600080fd5b6122dc8a838b0161220d565b965060408901359550606089013594506080890135935060a089013591508082111561230757600080fd5b5061231489828a0161213f565b9150509295509295509295565b60006020828403121561233357600080fd5b5035919050565b60005b8381101561235557818101518382015260200161233d565b50506000910152565b6000815180845261237681602086016020860161233a565b601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b600281106123be57634e487b7160e01b600052602160045260246000fd5b9052565b8981526001600160a01b038981166020830152610120604083018190526000916123ee8483018c61235e565b91508382036060850152612402828b61235e565b9250612411608085018a6123a0565b8760a08501528660c08501528560e085015280851661010085015250509a9950505050505050505050565b60008060006060848603121561245157600080fd5b83359250612461602085016120b0565b9150604084013590509250925092565b600080600080600060a0868803121561248957600080fd5b85359450602086013567ffffffffffffffff8111156124a757600080fd5b6124b38882890161220d565b959895975050505060408401359360608101359360809091013592509050565b6000602082840312156124e557600080fd5b611eb4826120b0565b6020808252825182820181905260009190848201906040850190845b818110156125265783518352928401929184019160010161250a565b50909695505050505050565b60208082526014908201527311dc9bdd5c08191bd95cc81b9bdd08195e1a5cdd60621b604082015260600190565b6020808252602e908201527f4f6e6c79207468652067726f75702063726561746f722063616e20706572666f60408201526d3936903a3434b99030b1ba34b7b760911b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115611a9757611a976125c4565b634e487b7160e01b600052603160045260246000fd5b600060018201612615576126156125c4565b5060010190565b6020808252825182820181905260009190848201906040850190845b818110156125265783516001600160a01b031683529284019291840191600101612638565b6020808252602d908201527f436f6e747269627574696f6e20616d6f756e74206d757374206265206772656160408201526c746572207468616e207a65726f60981b606082015260800190565b6020808252602d908201527f436f6e747269627574696f6e2074696d656c696e65206d75737420626520617460408201526c103632b0b9ba1018903437bab960991b606082015260800190565b6020808252602c908201527f536176696e677320726174696f206d75737420626520612070657263656e746160408201526b67652028302d31303030302960a01b606082015260800190565b600181811c9082168061275757607f821691505b60208210810361277757634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561148157600081815260208120601f850160051c810160208610156127a45750805b601f850160051c820191505b81811015610b74578281556001016127b0565b815167ffffffffffffffff8111156127dd576127dd6120f8565b6127f1816127eb8454612743565b8461277d565b602080601f831160018114612826576000841561280e5750858301515b600019600386901b1c1916600185901b178555610b74565b600085815260208120601f198616915b8281101561285557888601518255948401946001909101908401612836565b50858210156128735787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b03851681526080602082018190526000906128a79083018661235e565b82810360408401526128b9818661235e565b9150506128c960608301846123a0565b95945050505050565b80820180821115611a9757611a976125c4565b8082028115828204841417611a9757611a976125c4565b60008261291957634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b038316815260408101611eb460208301846123a0565b60808152600061294e608083018761235e565b6020830195909552506040810192909252606090910152919050565b60006020828403121561297c57600080fd5b81518015158114611eb457600080fd5b6000825161299e81846020870161233a565b9190910192915050565b602081526000611eb4602083018461235e56fea2646970667358221220e637ba70149a6fbcd5437140089ee8a8330b0a150f2a070c6d260f709f9a68e864736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100eb5760003560e01c80636cc29ea01161008a578063a4b1aa7911610059578063a4b1aa791461031a578063b56bb68d1461033a578063bd01c9a71461035a578063f2fde38b1461038757610154565b80636cc29ea014610295578063715018a6146102ca5780638952ac1e146102df5780638da5cb5b146102f257610154565b80632913daa0116100c65780632913daa01461021557806361b8ce8c1461023e57806363eb7b4d146102555780636be7658b1461027557610154565b8062f714ce146101b357806309c9af3f146101d55780632731e949146101f557610154565b366101545760405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420646f6573206e6f7420616363657074206469726563742060448201526d4574686572207061796d656e747360901b60648201526084015b60405180910390fd5b60405162461bcd60e51b815260206004820152602e60248201527f46616c6c6261636b2066756e6374696f6e207472696767657265642c206e6f2060448201526d115d1a195c881858d8d95c1d195960921b606482015260840161014b565b3480156101bf57600080fd5b506101d36101ce3660046120cc565b6103a7565b005b3480156101e157600080fd5b506101d36101f03660046120cc565b6105f3565b34801561020157600080fd5b506101d36102103660046121c6565b610733565b34801561022157600080fd5b5061022b60055481565b6040519081526020015b60405180910390f35b34801561024a57600080fd5b5060025461022b9081565b34801561026157600080fd5b506101d361027036600461227d565b610905565b34801561028157600080fd5b506101d36102903660046120cc565b610b7c565b3480156102a157600080fd5b506102b56102b0366004612321565b610d3b565b604051610235999897969594939291906123c2565b3480156102d657600080fd5b506101d3610f10565b6101d36102ed36600461243c565b610f24565b3480156102fe57600080fd5b506001546040516001600160a01b039091168152602001610235565b34801561032657600080fd5b506101d3610335366004612321565b611486565b34801561034657600080fd5b506101d3610355366004612471565b6115be565b34801561036657600080fd5b5061037a6103753660046124d3565b61176c565b60405161023591906124ee565b34801561039357600080fd5b506101d36103a23660046124d3565b6117d8565b6103af611857565b6000828152600360205260408120548391036103dd5760405162461bcd60e51b815260040161014b90612532565b600083815260036020526040812090600482015460ff1660018111156104055761040561238a565b148061042957506001600482015460ff1660018111156104275761042761238a565b145b6104755760405162461bcd60e51b815260206004820152601f60248201527f47726f7570206973206e6f7420616374697665206f7220617263686976656400604482015260640161014b565b6001600160a01b03831615600081156105005750336000908152600f83016020526040902054806104df5760405162461bcd60e51b81526020600482015260146024820152734e6f20457468657220746f20776974686472617760601b604482015260640161014b565b336000818152600f850160205260408120556104fb90826118b0565b61059f565b50336000908152600b8301602090815260408083206001600160a01b03881684529091529020548061056c5760405162461bcd60e51b81526020600482015260156024820152744e6f20746f6b656e7320746f20776974686472617760581b604482015260640161014b565b336000818152600b8501602090815260408083206001600160a01b038a16808552925282209190915561059f91836119c9565b604080518281526001600160a01b038716602082015233917e1a143d5b175701cb3246058ffac3d63945192075a926ff73a19930f09d587a910160405180910390a2505050506105ef6001600055565b5050565b6105fb611857565b6000828152600360205260408120548391036106295760405162461bcd60e51b815260040161014b90612532565b60008381526003602052604090206001015483906001600160a01b031633146106645760405162461bcd60e51b815260040161014b90612560565b600084815260036020526040902061067c8185611a2c565b156106c95760405162461bcd60e51b815260206004820152601860248201527f546f6b656e20697320616c726561647920616c6c6f7765640000000000000000604482015260640161014b565b6011810180546001810182556000918252602082200180546001600160a01b0319166001600160a01b038716908117909155604051909187917fca37a60f79854243dcab36b6ad6fcaafc7ae13448087ee70547943babc7dccf09190a35050506105ef6001600055565b61073b611857565b6000828152600360205260408120548391036107695760405162461bcd60e51b815260040161014b90612532565b60008381526003602052604090206001015483906001600160a01b031633146107a45760405162461bcd60e51b815260040161014b90612560565b6000848152600360205260408120905b84518110156108bf5760008582815181106107d1576107d16125ae565b6020026020010151905060006107e78483611a9d565b60118501549091508110156108aa57601184018054610808906001906125da565b81548110610818576108186125ae565b6000918252602090912001546011850180546001600160a01b039092169183908110610846576108466125ae565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555083601101805480610887576108876125ed565b600082815260209020810160001990810180546001600160a01b03191690550190555b505080806108b790612603565b9150506107b4565b50847f111b06d202096e6e7daf638fedcad7ee5eb78648092da57570b4a42bedf3d568856040516108f0919061261c565b60405180910390a25050506105ef6001600055565b61090d611857565b60008651116109575760405162461bcd60e51b81526020600482015260166024820152754e616d65206d757374206e6f7420626520656d70747960501b604482015260640161014b565b60008551116109a85760405162461bcd60e51b815260206004820152601d60248201527f4465736372697074696f6e206d757374206e6f7420626520656d707479000000604482015260640161014b565b600084116109c85760405162461bcd60e51b815260040161014b9061265d565b610e108310156109ea5760405162461bcd60e51b815260040161014b906126aa565b612710821115610a0c5760405162461bcd60e51b815260040161014b906126f7565b600060036000610a1b60025490565b81526020019081526020016000209050610a3460025490565b81556001810180546001600160a01b0319163317905560028101610a5888826127c3565b5060038101610a6787826127c3565b5060048101805460ff19908116909155600582018690556006820185905560078201849055600982018054600181810183556000928352602080842090920180546001600160a01b031916339081179091558352600c8501825260408084208054909516909117909355600e840181529190204290558251610af191601184019190850190612036565b50336000908152600460205260409020600254815460018101835560009283526020909220909101556002547f7f59872da60a4c019e3e167c8d5c5c0093bd0e199cfeca02250057a73b6a6d8a3389896000604051610b539493929190612883565b60405180910390a2610b69600280546001019055565b50610b746001600055565b505050505050565b610b84611857565b600082815260036020526040812054839103610bb25760405162461bcd60e51b815260040161014b90612532565b60008381526003602052604090206001015483906001600160a01b03163314610bed5760405162461bcd60e51b815260040161014b90612560565b60008481526003602090815260408083206001600160a01b0387168452600c81019092529091205460ff16610c5a5760405162461bcd60e51b815260206004820152601360248201527213595b58995c881b9bdd08185c1c1c9bdd9959606a1b604482015260640161014b565b6000600482015460ff166001811115610c7557610c7561238a565b1480610c9957506001600482015460ff166001811115610c9757610c9761238a565b145b610ce55760405162461bcd60e51b815260206004820152601f60248201527f47726f7570206973206e6f7420616374697665206f7220617263686976656400604482015260640161014b565b6001600160a01b0384166000818152600c83016020526040808220805460ff191690555187917f1c4c9d2e56d0635d11bc47c997c6909a0d7061f55cbb8f4b27386db37553191c91a35050506105ef6001600055565b6000806060806000806000806000896003600082815260200190815260200160002060000154600003610d805760405162461bcd60e51b815260040161014b90612532565b60008b81526003602081905260409091208054600182015460048301546005840154600685015460078601546010870154600288018054989997986001600160a01b03978816989197918b019660ff1695949392909116908790610de390612743565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0f90612743565b8015610e5c5780601f10610e3157610100808354040283529160200191610e5c565b820191906000526020600020905b815481529060010190602001808311610e3f57829003601f168201915b50505050509650858054610e6f90612743565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9b90612743565b8015610ee85780601f10610ebd57610100808354040283529160200191610ee8565b820191906000526020600020905b815481529060010190602001808311610ecb57829003601f168201915b505050505095509a509a509a509a509a509a509a509a509a5050509193959799909294969850565b610f18611b09565b610f226000611b63565b565b610f2c611857565b600083815260036020526040812054849103610f5a5760405162461bcd60e51b815260040161014b90612532565b6000848152600360209081526040808320338452600c01909152902054849060ff16610fc85760405162461bcd60e51b815260206004820152601e60248201527f596f7520617265206e6f7420616e20617070726f766564206d656d6265720000604482015260640161014b565b600085815260036020526040812090600482015460ff166001811115610ff057610ff061238a565b146110335760405162461bcd60e51b815260206004820152601360248201527247726f7570206973206e6f742061637469766560681b604482015260640161014b565b8060060154816008015461104791906128d2565b4210156110965760405162461bcd60e51b815260206004820152601d60248201527f436f6e747269627574696f6e2074696d656c696e65206e6f74206d6574000000604482015260640161014b565b806006015481600801546110aa91906128d2565b6110b790620151806128d2565b42106111055760405162461bcd60e51b815260206004820152601d60248201527f436f6e747269627574696f6e20706572696f642068617320656e646564000000604482015260640161014b565b600581015460078201546001600160a01b03871615916000916127109161112b916128e5565b61113591906128fc565b9050600081846005015461114991906125da565b9050821561120f57836005015434146111b05760405162461bcd60e51b815260206004820152602360248201527f496e636f727265637420457468657220636f6e747269627574696f6e20616d6f6044820152621d5b9d60ea1b606482015260840161014b565b336000908152600f85016020526040812080548392906111d19084906128d2565b909155505060108401546001600160a01b03166000908152600f85016020526040812080548492906112049084906128d2565b909155506113579050565b8360050154871461126e5760405162461bcd60e51b815260206004820152602360248201527f496e636f727265637420746f6b656e20636f6e747269627574696f6e20616d6f6044820152621d5b9d60ea1b606482015260840161014b565b6112788489611a2c565b6112c45760405162461bcd60e51b815260206004820181905260248201527f546f6b656e206e6f7420616c6c6f77656420666f7220746869732067726f7570604482015260640161014b565b6112d96001600160a01b03891633308a611bb5565b336000908152600b8501602090815260408083206001600160a01b038c1684529091528120805483929061130e9084906128d2565b909155505060108401546001600160a01b039081166000908152600b860160209081526040808320938c16835292905290812080548492906113519084906128d2565b90915550505b836005015484601201600082825461136f91906128d2565b909155505042600885015560138401805461ffff191660011790556113948433611bf3565b6113f257600984018054600181810183556000928352602080842090920180546001600160a01b031916339081179091558084526004835260408085208054938401815585528385209092018d90558352600e870190915290204290555b336000908152600d85016020526040812080548492906114139084906128d2565b90915550339050897f2fb3252c9a073e1e9018a7d2905521430380ba69dd563186c3e733e53a25379b856114475789611449565b345b604080519182526001600160a01b038d1660208301520160405180910390a361147189611c58565b5050505050506114816001600055565b505050565b61148e611857565b6000818152600360205260408120548291036114bc5760405162461bcd60e51b815260040161014b90612532565b60008281526003602052604090206001015482906001600160a01b031633146114f75760405162461bcd60e51b815260040161014b90612560565b600083815260036020526040812090600482015460ff16600181111561151f5761151f61238a565b146115625760405162461bcd60e51b815260206004820152601360248201527247726f7570206973206e6f742061637469766560681b604482015260640161014b565b60048101805460ff1916600190811790915560405185917fa77b40b842ddd14f93d5badff26d49b0ffe46f67a2bcb599cf42e74e12cabf78916115a691339161291e565b60405180910390a25050506115bb6001600055565b50565b6115c6611857565b6000858152600360205260408120548691036115f45760405162461bcd60e51b815260040161014b90612532565b60008681526003602052604090206001015486906001600160a01b0316331461162f5760405162461bcd60e51b815260040161014b90612560565b60008651116116805760405162461bcd60e51b815260206004820152601d60248201527f4465736372697074696f6e206d757374206e6f7420626520656d707479000000604482015260640161014b565b600085116116a05760405162461bcd60e51b815260040161014b9061265d565b610e108410156116c25760405162461bcd60e51b815260040161014b906126aa565b6127108311156116e45760405162461bcd60e51b815260040161014b906126f7565b600087815260036020819052604090912090810161170288826127c3565b5060058101869055600681018590556007810184905560405188907fdeafbf2f63aac7fbb359f5926ebace9d56638ad6f367ec5619fb586b1fa79ce990611750908a908a908a908a9061293b565b60405180910390a25050506117656001600055565b5050505050565b6001600160a01b0381166000908152600460209081526040918290208054835181840281018401909452808452606093928301828280156117cc57602002820191906000526020600020905b8154815260200190600101908083116117b8575b50505050509050919050565b6117e0611b09565b6001600160a01b0381166118455760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161014b565b6115bb81611b63565b80546001019055565b6002600054036118a95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161014b565b6002600055565b804710156119005760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161014b565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461194d576040519150601f19603f3d011682016040523d82523d6000602084013e611952565b606091505b50509050806114815760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161014b565b6040516001600160a01b03831660248201526044810182905261148190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611dcd565b6000805b6011840154811015611a9157826001600160a01b0316846011018281548110611a5b57611a5b6125ae565b6000918252602090912001546001600160a01b031603611a7f576001915050611a97565b80611a8981612603565b915050611a30565b50600090505b92915050565b6000805b6011840154811015611aff57826001600160a01b0316846011018281548110611acc57611acc6125ae565b6000918252602090912001546001600160a01b031603611aed579050611a97565b80611af781612603565b915050611aa1565b5050506011015490565b6001546001600160a01b03163314610f225760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161014b565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052611bed9085906323b872dd60e01b906084016119f5565b50505050565b6000805b6009840154811015611a9157826001600160a01b0316846009018281548110611c2257611c226125ae565b6000918252602090912001546001600160a01b031603611c46576001915050611a97565b80611c5081612603565b915050611bf7565b600081815260036020526040812054829103611c865760405162461bcd60e51b815260040161014b90612532565b60008281526003602052604081209080805b6009840154811015611d7a576000846009018281548110611cbb57611cbb6125ae565b60009182526020808320909101546001600160a01b0316808352600c880190915260409091205490915060ff168015611d0d57506001600160a01b0381166000908152600d8601602052604090205484105b8015611d4157506001600160a01b0381166000908152600e86016020526040902054611d3d906276a700906128d2565b4210155b15611d67576001600160a01b0381166000908152600d8601602052604090205493509150815b5080611d7281612603565b915050611c98565b506010830180546001600160a01b0319166001600160a01b03831690811790915560405186907f6d0d14e343bfa65dd86d4507c0b3afddc7477b6ceb74e4cb35f454ed02f8f5aa90600090a35050505050565b6000611e22826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611ea29092919063ffffffff16565b9050805160001480611e43575080806020019051810190611e43919061296a565b6114815760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161014b565b6060611eb18484600085611ebb565b90505b9392505050565b606082471015611f1c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161014b565b600080866001600160a01b03168587604051611f38919061298c565b60006040518083038185875af1925050503d8060008114611f75576040519150601f19603f3d011682016040523d82523d6000602084013e611f7a565b606091505b5091509150611f8b87838387611f98565b925050505b949350505050565b60608315612007578251600003612000576001600160a01b0385163b6120005760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161014b565b5081611f90565b611f90838381511561201c5781518083602001fd5b8060405162461bcd60e51b815260040161014b91906129a8565b82805482825590600052602060002090810192821561208b579160200282015b8281111561208b57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612056565b5061209792915061209b565b5090565b5b80821115612097576000815560010161209c565b80356001600160a01b03811681146120c757600080fd5b919050565b600080604083850312156120df57600080fd5b823591506120ef602084016120b0565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612137576121376120f8565b604052919050565b600082601f83011261215057600080fd5b8135602067ffffffffffffffff82111561216c5761216c6120f8565b8160051b61217b82820161210e565b928352848101820192828101908785111561219557600080fd5b83870192505b848310156121bb576121ac836120b0565b8252918301919083019061219b565b979650505050505050565b600080604083850312156121d957600080fd5b82359150602083013567ffffffffffffffff8111156121f757600080fd5b6122038582860161213f565b9150509250929050565b600082601f83011261221e57600080fd5b813567ffffffffffffffff811115612238576122386120f8565b61224b601f8201601f191660200161210e565b81815284602083860101111561226057600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c0878903121561229657600080fd5b863567ffffffffffffffff808211156122ae57600080fd5b6122ba8a838b0161220d565b975060208901359150808211156122d057600080fd5b6122dc8a838b0161220d565b965060408901359550606089013594506080890135935060a089013591508082111561230757600080fd5b5061231489828a0161213f565b9150509295509295509295565b60006020828403121561233357600080fd5b5035919050565b60005b8381101561235557818101518382015260200161233d565b50506000910152565b6000815180845261237681602086016020860161233a565b601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b600281106123be57634e487b7160e01b600052602160045260246000fd5b9052565b8981526001600160a01b038981166020830152610120604083018190526000916123ee8483018c61235e565b91508382036060850152612402828b61235e565b9250612411608085018a6123a0565b8760a08501528660c08501528560e085015280851661010085015250509a9950505050505050505050565b60008060006060848603121561245157600080fd5b83359250612461602085016120b0565b9150604084013590509250925092565b600080600080600060a0868803121561248957600080fd5b85359450602086013567ffffffffffffffff8111156124a757600080fd5b6124b38882890161220d565b959895975050505060408401359360608101359360809091013592509050565b6000602082840312156124e557600080fd5b611eb4826120b0565b6020808252825182820181905260009190848201906040850190845b818110156125265783518352928401929184019160010161250a565b50909695505050505050565b60208082526014908201527311dc9bdd5c08191bd95cc81b9bdd08195e1a5cdd60621b604082015260600190565b6020808252602e908201527f4f6e6c79207468652067726f75702063726561746f722063616e20706572666f60408201526d3936903a3434b99030b1ba34b7b760911b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115611a9757611a976125c4565b634e487b7160e01b600052603160045260246000fd5b600060018201612615576126156125c4565b5060010190565b6020808252825182820181905260009190848201906040850190845b818110156125265783516001600160a01b031683529284019291840191600101612638565b6020808252602d908201527f436f6e747269627574696f6e20616d6f756e74206d757374206265206772656160408201526c746572207468616e207a65726f60981b606082015260800190565b6020808252602d908201527f436f6e747269627574696f6e2074696d656c696e65206d75737420626520617460408201526c103632b0b9ba1018903437bab960991b606082015260800190565b6020808252602c908201527f536176696e677320726174696f206d75737420626520612070657263656e746160408201526b67652028302d31303030302960a01b606082015260800190565b600181811c9082168061275757607f821691505b60208210810361277757634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561148157600081815260208120601f850160051c810160208610156127a45750805b601f850160051c820191505b81811015610b74578281556001016127b0565b815167ffffffffffffffff8111156127dd576127dd6120f8565b6127f1816127eb8454612743565b8461277d565b602080601f831160018114612826576000841561280e5750858301515b600019600386901b1c1916600185901b178555610b74565b600085815260208120601f198616915b8281101561285557888601518255948401946001909101908401612836565b50858210156128735787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b03851681526080602082018190526000906128a79083018661235e565b82810360408401526128b9818661235e565b9150506128c960608301846123a0565b95945050505050565b80820180821115611a9757611a976125c4565b8082028115828204841417611a9757611a976125c4565b60008261291957634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b038316815260408101611eb460208301846123a0565b60808152600061294e608083018761235e565b6020830195909552506040810192909252606090910152919050565b60006020828403121561297c57600080fd5b81518015158114611eb457600080fd5b6000825161299e81846020870161233a565b9190910192915050565b602081526000611eb4602083018461235e56fea2646970667358221220e637ba70149a6fbcd5437140089ee8a8330b0a150f2a070c6d260f709f9a68e864736f6c63430008120033",
  "devdoc": {
    "details": "A smart contract for managing savings groups (Chamas) where members can contribute Ether or ERC20 tokens. The contract includes functionalities for group creation, contributions, grantee selection, withdrawals, and group archiving.",
    "kind": "dev",
    "methods": {
      "addAllowedToken(uint256,address)": {
        "details": "Adds a new token to the allowed tokens list for a group.",
        "params": {
          "groupId": "The ID of the group.",
          "tokenAddress": "The address of the ERC20 token to add."
        }
      },
      "archiveGroup(uint256)": {
        "details": "Archives a group and marks it as inactive.",
        "params": {
          "groupId": "The ID of the group."
        }
      },
      "contribute(uint256,address,uint256)": {
        "details": "Allows an approved member to contribute Ether or ERC20 tokens to the specified group.",
        "params": {
          "groupId": "The ID of the group.",
          "tokenAddress": "The address of the ERC20 token (use 0x0000000000000000000000000000000000000000 for Ether).",
          "tokenAmount": "The amount of ERC20 tokens to contribute, in the token's smallest unit."
        }
      },
      "createGroup(string,string,uint256,uint256,uint256,address[])": {
        "details": "Creates a new savings group with the specified parameters.",
        "params": {
          "_allowedTokens": "An array of allowed ERC20 token addresses for contributions.",
          "_contributionAmount": "The fixed contribution amount for all members, denoted in the smallest unit (e.g., wei for Ether, or token decimals for ERC20).",
          "_contributionTimelineInSeconds": "The timeline for contributions, in seconds.",
          "_description": "The description of the group.",
          "_name": "The name of the group.",
          "_savingsRatio": "The percentage out of 10000 for the savings split."
        }
      },
      "getGroupById(uint256)": {
        "details": "Retrieves the details of a group by its ID.",
        "params": {
          "groupId": "The ID of the group."
        },
        "returns": {
          "contributionAmount": "The fixed contribution amount for the group.",
          "contributionTimeline": "The contribution timeline for the group.",
          "creator": "The creator of the group.",
          "description": "The description of the group.",
          "id": "The ID of the group.",
          "name": "The name of the group.",
          "savingsRatio": "The savings ratio percentage for the group.",
          "selectedGrantee": "The currently selected grantee.",
          "status": "The current status of the group."
        }
      },
      "getGroupsByContributor(address)": {
        "details": "Retrieves the IDs of groups a contributor belongs to.",
        "params": {
          "contributor": "The address of the contributor."
        },
        "returns": {
          "_0": "An array of group IDs the contributor belongs to."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeAllowedTokens(uint256,address[])": {
        "details": "Removes multiple tokens from the allowed tokens list for a group.",
        "params": {
          "groupId": "The ID of the group.",
          "tokenAddresses": "The array of ERC20 token addresses to remove."
        }
      },
      "removeMember(uint256,address)": {
        "details": "Removes a member from the group, but allows them to withdraw their contributions if they meet conditions.",
        "params": {
          "groupId": "The ID of the group.",
          "member": "The address of the member to remove."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateGroup(uint256,string,uint256,uint256,uint256)": {
        "details": "Updates group settings if members agree.",
        "params": {
          "_contributionAmount": "The new contribution amount for the group.",
          "_contributionTimelineInSeconds": "The new contribution timeline for the group, in seconds.",
          "_description": "The new description of the group.",
          "_savingsRatio": "The new savings ratio for the group.",
          "groupId": "The ID of the group."
        }
      },
      "withdraw(uint256,address)": {
        "details": "Withdraws Ether or ERC20 tokens for the selected grantee or a contributor claiming their owed balance. Only the grantee can withdraw the allocated amount for the current period. Contributors can withdraw their owed balances after the saving period or if the group is archived.",
        "params": {
          "groupId": "The ID of the group.",
          "tokenAddress": "The address of the ERC20 token (use 0x0000000000000000000000000000000000000000 for Ether)."
        }
      }
    },
    "title": "ChamaGroupV5",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 123,
        "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6703,
        "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
        "label": "nextId",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)1637_storage"
      },
      {
        "astId": 6777,
        "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
        "label": "groups",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Group)6772_storage)"
      },
      {
        "astId": 6782,
        "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
        "label": "contributorGroups",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 6785,
        "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
        "label": "maxBatchSize",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(STATUS)6712": {
        "encoding": "inplace",
        "label": "enum ChamaGroupV5.STATUS",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Group)6772_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ChamaGroupV5.Group)",
        "numberOfBytes": "32",
        "value": "t_struct(Group)6772_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1637_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1636,
            "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Group)6772_storage": {
        "encoding": "inplace",
        "label": "struct ChamaGroupV5.Group",
        "members": [
          {
            "astId": 6714,
            "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6716,
            "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6718,
            "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 6720,
            "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 6723,
            "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
            "label": "status",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(STATUS)6712"
          },
          {
            "astId": 6725,
            "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
            "label": "contributionAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6727,
            "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
            "label": "contributionTimeline",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6729,
            "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
            "label": "savingsRatio",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 6731,
            "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
            "label": "lastContributionTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 6734,
            "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
            "label": "contributors",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 6738,
            "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
            "label": "etherContributions",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 6744,
            "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
            "label": "tokenContributions",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 6748,
            "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
            "label": "approvedMembers",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 6752,
            "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
            "label": "votingPower",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 6756,
            "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
            "label": "joinTime",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 6760,
            "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
            "label": "etherOwed",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 6762,
            "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
            "label": "selectedGrantee",
            "offset": 0,
            "slot": "16",
            "type": "t_address"
          },
          {
            "astId": 6765,
            "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
            "label": "allowedTokens",
            "offset": 0,
            "slot": "17",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 6767,
            "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
            "label": "totalContributions",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256"
          },
          {
            "astId": 6769,
            "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
            "label": "granteeApproved",
            "offset": 0,
            "slot": "19",
            "type": "t_bool"
          },
          {
            "astId": 6771,
            "contract": "contracts/ChamaGroup5.sol:ChamaGroupV5",
            "label": "hasWithdrawn",
            "offset": 1,
            "slot": "19",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "640"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}